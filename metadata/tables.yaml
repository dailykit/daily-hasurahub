- table:
    schema: brands
    name: brand
  configuration:
    custom_root_fields:
      insert: createBrands
      select_aggregate: brandsAggregate
      insert_one: createBrand
      select_by_pk: brand
      select: brands
      delete: deleteBrands
      update: updateBrands
      delete_by_pk: deleteBrand
      update_by_pk: updateBrand
    custom_column_names: {}
  object_relationships:
  - name: website
    using:
      manual_configuration:
        remote_table:
          schema: website
          name: website
        column_mapping:
          id: brandId
  array_relationships:
  - name: brand_campaigns
    using:
      foreign_key_constraint_on:
        column: brandId
        table:
          schema: crm
          name: brand_campaign
  - name: brand_coupons
    using:
      foreign_key_constraint_on:
        column: brandId
        table:
          schema: crm
          name: brand_coupon
  - name: brand_customers
    using:
      foreign_key_constraint_on:
        column: brandId
        table:
          schema: crm
          name: brand_customer
  - name: brand_Orders
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: order
        column_mapping:
          id: brandId
  - name: carts
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cart
        column_mapping:
          id: brandId
  - name: collections
    using:
      foreign_key_constraint_on:
        column: brandId
        table:
          schema: onDemand
          name: brand_collection
  - name: onDemandSettings
    using:
      foreign_key_constraint_on:
        column: brandId
        table:
          schema: brands
          name: brand_storeSetting
  - name: recurrences
    using:
      foreign_key_constraint_on:
        column: brandId
        table:
          schema: fulfilment
          name: brand_recurrence
  - name: subscriptionStoreSettings
    using:
      foreign_key_constraint_on:
        column: brandId
        table:
          schema: brands
          name: brand_subscriptionStoreSetting
  - name: subscriptionTitles
    using:
      foreign_key_constraint_on:
        column: brandId
        table:
          schema: subscription
          name: brand_subscriptionTitle
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - domain
      - isDefault
      - title
      - isPublished
      - onDemandRequested
      - subscriptionRequested
      - isArchived
      - parseurMailBoxId
      - importHistoryId
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - importHistoryId
      - domain
      - onDemandRequested
      - subscriptionRequested
      - isArchived
      - isDefault
      - parseurMailBoxId
      - title
      - id
      - isPublished
      filter: {}
      allow_aggregations: true
- table:
    schema: brands
    name: brand_paymentPartnership
  select_permissions:
  - role: consumer
    permission:
      columns:
      - brandId
      - paymentPartnershipId
      - isActive
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - brandId
      - paymentPartnershipId
      - isActive
      filter: {}
      allow_aggregations: true
- table:
    schema: brands
    name: brand_storeSetting
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  - name: onDemandSetting
    using:
      foreign_key_constraint_on: storeSettingId
  select_permissions:
  - role: consumer
    permission:
      columns:
      - brandId
      - storeSettingId
      - value
      - importHistoryId
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - importHistoryId
      - brandId
      - storeSettingId
      - value
      filter: {}
      allow_aggregations: true
- table:
    schema: brands
    name: brand_subscriptionStoreSetting
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  - name: subscriptionStoreSetting
    using:
      foreign_key_constraint_on: subscriptionStoreSettingId
  select_permissions:
  - role: consumer
    permission:
      columns:
      - brandId
      - subscriptionStoreSettingId
      - value
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - brandId
      - subscriptionStoreSettingId
      - value
      filter: {}
      allow_aggregations: true
- table:
    schema: brands
    name: storeSetting
  configuration:
    custom_root_fields:
      insert: createStoreSettings
      select_aggregate: storeSettingsAggregate
      insert_one: createStoreSetting
      select_by_pk: storeSettingByPK
      select: storeSettings
      delete: deleteStoreSetting
      update: updateStoreSetting
      delete_by_pk: deleteStoreSettingByPK
      update_by_pk: updateStoreSettingByPK
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      manual_configuration:
        remote_table:
          schema: brands
          name: brand_storeSetting
        column_mapping:
          id: storeSettingId
  array_relationships:
  - name: brandSettings
    using:
      foreign_key_constraint_on:
        column: storeSettingId
        table:
          schema: brands
          name: brand_storeSetting
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - identifier
      - value
      - type
      filter: {}
      allow_aggregations: true
- table:
    schema: brands
    name: subscriptionStoreSetting
  object_relationships:
  - name: brand
    using:
      manual_configuration:
        remote_table:
          schema: brands
          name: brand_subscriptionStoreSetting
        column_mapping:
          id: subscriptionStoreSettingId
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - identifier
      - value
      - type
      filter: {}
      allow_aggregations: true
- table:
    schema: content
    name: identifier
  object_relationships:
  - name: page
    using:
      foreign_key_constraint_on: pageTitle
  select_permissions:
  - role: consumer
    permission:
      columns:
      - title
      - pageTitle
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - pageTitle
      - title
      filter: {}
      allow_aggregations: true
- table:
    schema: content
    name: page
  array_relationships:
  - name: identifiers
    using:
      foreign_key_constraint_on:
        column: pageTitle
        table:
          schema: content
          name: identifier
  select_permissions:
  - role: consumer
    permission:
      columns:
      - title
      - description
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - description
      - title
      filter: {}
      allow_aggregations: true
- table:
    schema: content
    name: subscriptionDivIds
  object_relationships:
  - name: subscriptionDivFileId
    using:
      foreign_key_constraint_on: fileId
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - fileId
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - fileId
      - id
      filter: {}
      allow_aggregations: true
- table:
    schema: content
    name: template
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - id
      filter: {}
      allow_aggregations: true
  event_triggers:
  - name: handleTemplate
    definition:
      enable_manual: true
      insert:
        columns: '*'
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: https://156bd2d32e02.ngrok.io/webhooks/handle
- table:
    schema: crm
    name: brand_campaign
  configuration:
    custom_root_fields:
      insert: createBrandCampaigns
      select_aggregate: brandCampaignsAggregate
      insert_one: createBrandCampaign
      select_by_pk: brandCampaign
      select: brandCampaigns
      delete: deleteBrandCampaigns
      update: updateBrandCampaigns
      delete_by_pk: deleteBrandCampaign
      update_by_pk: updateBrandCampaign
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  - name: campaign
    using:
      foreign_key_constraint_on: campaignId
- table:
    schema: crm
    name: brand_coupon
  configuration:
    custom_root_fields:
      insert: createBrandCoupons
      select_aggregate: brandCouponsAggregate
      insert_one: createBrandCoupon
      select_by_pk: brandCoupon
      select: brandCoupons
      delete: deleteBrandCoupons
      update: updateBrandCoupons
      delete_by_pk: deleteBrandCoupon
      update_by_pk: updateBrandCoupon
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  - name: coupon
    using:
      foreign_key_constraint_on: couponId
  select_permissions:
  - role: consumer
    permission:
      columns:
      - couponId
      - brandId
      - isActive
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - couponId
      - brandId
      - isActive
      filter: {}
- table:
    schema: crm
    name: brand_customer
  configuration:
    custom_root_fields:
      insert: createBrandCustomers
      select_aggregate: brandCustomersAggregate
      insert_one: createBrandCustomer
      select_by_pk: brandCustomer
      select: brandCustomers
      delete: deleteBrandCustomers
      update: updateBrandCustomers
      delete_by_pk: deleteBrandCustomer
      update_by_pk: updateBrandCustomer
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  - name: customer
    using:
      foreign_key_constraint_on: keycloakId
  - name: subscription
    using:
      foreign_key_constraint_on: subscriptionId
  array_relationships:
  - name: subscriptionOccurences
    using:
      foreign_key_constraint_on:
        column: brand_customerId
        table:
          schema: subscription
          name: subscriptionOccurence_customer
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - keycloakId
      - brandId
      - created_at
      - updated_at
      - isSubscriber
      - subscriptionId
      - subscriptionAddressId
      - subscriptionPaymentMethodId
      - isAutoSelectOptOut
      filter: {}
      allow_aggregations: true
- table:
    schema: crm
    name: campaign
  configuration:
    custom_root_fields:
      insert: createCampaigns
      select_aggregate: campaignsAggregate
      insert_one: createCampaign
      select_by_pk: campaign
      select: campaigns
      delete: deleteCampaigns
      update: updateCampaigns
      delete_by_pk: deleteCampaign
      update_by_pk: updateCampaign
    custom_column_names: {}
  object_relationships:
  - name: campaignType
    using:
      foreign_key_constraint_on: type
  - name: condition
    using:
      foreign_key_constraint_on: conditionId
  array_relationships:
  - name: brands
    using:
      foreign_key_constraint_on:
        column: campaignId
        table:
          schema: crm
          name: brand_campaign
  - name: customerReferrals
    using:
      foreign_key_constraint_on:
        column: referralCampaignId
        table:
          schema: crm
          name: customerReferral
  - name: rewardHistories
    using:
      foreign_key_constraint_on:
        column: campaignId
        table:
          schema: crm
          name: rewardHistory
  - name: rewards
    using:
      foreign_key_constraint_on:
        column: campaignId
        table:
          schema: crm
          name: reward
  computed_fields:
  - name: isCampaignValid
    definition:
      function:
        schema: crm
        name: iscampaignvalid
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - type
      - metaDetails
      - conditionId
      - isRewardMulti
      - isActive
      - priority
      - created_at
      - updated_at
      - isArchived
      computed_fields:
      - isCampaignValid
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - id
      - type
      - metaDetails
      - conditionId
      - isRewardMulti
      - isActive
      - priority
      - created_at
      - updated_at
      - isArchived
      computed_fields:
      - isCampaignValid
      filter: {}
      allow_aggregations: true
- table:
    schema: crm
    name: campaignType
  array_relationships:
  - name: campaigns
    using:
      foreign_key_constraint_on:
        column: type
        table:
          schema: crm
          name: campaign
  - name: rewardTypes
    using:
      foreign_key_constraint_on:
        column: campaignTypeId
        table:
          schema: crm
          name: rewardType_campaignType
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - value
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - id
      - value
      filter: {}
      allow_aggregations: true
- table:
    schema: crm
    name: coupon
  configuration:
    custom_root_fields:
      insert: createCoupons
      select_aggregate: couponsAggregate
      insert_one: createCoupon
      select_by_pk: coupon
      select: coupons
      delete: deleteCoupons
      update: updateCoupons
      delete_by_pk: deleteCoupon
      update_by_pk: updateCoupon
    custom_column_names: {}
  object_relationships:
  - name: visibilityCondition
    using:
      foreign_key_constraint_on: visibleConditionId
  array_relationships:
  - name: brands
    using:
      foreign_key_constraint_on:
        column: couponId
        table:
          schema: crm
          name: brand_coupon
  - name: rewardHistories
    using:
      foreign_key_constraint_on:
        column: couponId
        table:
          schema: crm
          name: rewardHistory
  - name: rewards
    using:
      foreign_key_constraint_on:
        column: couponId
        table:
          schema: crm
          name: reward
  computed_fields:
  - name: isCouponValid
    definition:
      function:
        schema: crm
        name: iscouponvalid
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - isActive
      - metaDetails
      - code
      - isRewardMulti
      - visibleConditionId
      - isVoucher
      - isArchived
      computed_fields:
      - isCouponValid
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isVoucher
      - code
      - isRewardMulti
      - id
      - isArchived
      - metaDetails
      - visibleConditionId
      - isActive
      computed_fields:
      - isCouponValid
      filter: {}
      allow_aggregations: true
- table:
    schema: crm
    name: customer
  configuration:
    custom_root_fields:
      insert: createCustomers
      select_aggregate: customers_aggregate
      insert_one: createCustomer
      select_by_pk: customer
      select: customers
      delete: deleteCustomers
      update: updateCustomers
      delete_by_pk: deleteCustomer
      update_by_pk: updateCustomer
    custom_column_names: {}
  object_relationships:
  - name: subscription
    using:
      foreign_key_constraint_on: subscriptionId
  array_relationships:
  - name: brandCustomers
    using:
      foreign_key_constraint_on:
        column: keycloakId
        table:
          schema: crm
          name: brand_customer
  - name: carts
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cart
        column_mapping:
          id: customerId
  - name: customerReferrals
    using:
      foreign_key_constraint_on:
        column: keycloakId
        table:
          schema: crm
          name: customerReferral
  - name: loyaltyPoints
    using:
      foreign_key_constraint_on:
        column: keycloakId
        table:
          schema: crm
          name: loyaltyPoint
  - name: loyaltyPointTransactions
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cart
        column_mapping:
          keycloakId: customerKeycloakId
  - name: orders
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: order
        column_mapping:
          keycloakId: keycloakId
  - name: rewardHistories
    using:
      foreign_key_constraint_on:
        column: keycloakId
        table:
          schema: crm
          name: rewardHistory
  - name: subscriptionOccurences
    using:
      foreign_key_constraint_on:
        column: keycloakId
        table:
          schema: subscription
          name: subscriptionOccurence_customer
  - name: wallets
    using:
      foreign_key_constraint_on:
        column: keycloakId
        table:
          schema: crm
          name: wallet
  remote_relationships:
  - definition:
      remote_field:
        paymentHub_payment:
          arguments:
            where:
              customerKeycloakId:
                _eq: $keycloakId
      hasura_fields:
      - keycloakId
      remote_schema: dailycloak
    name: attemptedPayments
  - definition:
      remote_field:
        platform_customer:
          arguments:
            keycloakId: $keycloakId
      hasura_fields:
      - keycloakId
      remote_schema: dailykey
    name: platform_customer
  - definition:
      remote_field:
        platform_customerByClient:
          arguments:
            keycloakId: $keycloakId
      hasura_fields:
      - keycloakId
      remote_schema: dailykey
    name: platform_customerByClient
  - definition:
      remote_field:
        platform_customers:
          arguments:
            where:
              keycloakId:
                _eq: $keycloakId
      hasura_fields:
      - keycloakId
      remote_schema: dailykey
    name: platform_customers
  - definition:
      remote_field:
        platform_customerByClients:
          arguments:
            where:
              keycloakId:
                _eq: $keycloakId
      hasura_fields:
      - keycloakId
      remote_schema: dailykey
    name: platform_customerByClients
  select_permissions:
  - role: consumer
    permission:
      columns:
      - clientId
      - created_at
      - email
      - id
      - isArchived
      - isSubscriber
      - isTest
      - keycloakId
      - source
      - sourceBrandId
      - subscriptionId
      - updated_at
      filter: {}
      allow_aggregations: true
  event_triggers:
  - name: createCustomerByClient
    definition:
      enable_manual: true
      insert:
        columns: '*'
    retry_conf:
      num_retries: 10
      interval_sec: 1
      timeout_sec: 60
    webhook_from_env: WEBHOOK_CREATE_CUSTOMER_BY_CLIENT
    headers:
    - name: OrganizationId
      value_from_env: HEADER_REMOTE_SCHEMA_ORGANIZATIONID
- table:
    schema: crm
    name: customerData
- table:
    schema: crm
    name: customerReferral
  configuration:
    custom_root_fields:
      insert: createCustomerReferrals
      select_aggregate: customerReferralsAggregate
      insert_one: createCustomerReferral
      select_by_pk: customerReferral
      select: customerReferrals
      delete: deleteCustomerReferrals
      update: updateCustomerReferrals
      delete_by_pk: deleteCustomerReferral
      update_by_pk: updateCustomerReferral
    custom_column_names: {}
  object_relationships:
  - name: customer
    using:
      foreign_key_constraint_on: keycloakId
  - name: customerReferrer
    using:
      foreign_key_constraint_on: referredByCode
  - name: referralCampaign
    using:
      foreign_key_constraint_on: referralCampaignId
  array_relationships:
  - name: customerReferrals
    using:
      foreign_key_constraint_on:
        column: referredByCode
        table:
          schema: crm
          name: customerReferral
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - keycloakId
      - referralCode
      - referredByCode
      - referralStatus
      - referralCampaignId
      - signupCampaignId
      - signupStatus
      - brandId
      filter: {}
- table:
    schema: crm
    name: loyaltyPoint
  configuration:
    custom_root_fields:
      insert: createLoyaltyPoints
      select_aggregate: loyaltyPointsAggregate
      insert_one: createLoyaltyPoint
      select_by_pk: loyaltyPoint
      select: loyaltyPoints
      delete: deleteLoyaltyPoints
      update: updateLoyaltyPoints
      delete_by_pk: deleteLoyaltyPoint
      update_by_pk: updateLoyaltyPoint
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  - name: customer
    using:
      foreign_key_constraint_on: keycloakId
  array_relationships:
  - name: loyaltyPointTransactions
    using:
      foreign_key_constraint_on:
        column: loyaltyPointId
        table:
          schema: crm
          name: loyaltyPointTransaction
- table:
    schema: crm
    name: loyaltyPointTransaction
  configuration:
    custom_root_fields:
      insert: createLoyaltyPointsTransactions
      select_aggregate: loyaltyPointsTransactionsAggregate
      insert_one: createLoyaltyPointsTransaction
      select_by_pk: loyaltyPointsTransaction
      select: loyaltyPointsTransactions
      delete: deleteLoyaltyPointsTransactions
      update: updateLoyaltyPointsTransactions
      delete_by_pk: deleteLoyaltyPointsTransaction
      update_by_pk: updateLoyaltyPointsTransaction
    custom_column_names: {}
  object_relationships:
  - name: cart
    using:
      foreign_key_constraint_on: orderCartId
  - name: customerReferral
    using:
      foreign_key_constraint_on: customerReferralId
  - name: loyaltyPoint
    using:
      foreign_key_constraint_on: loyaltyPointId
  array_relationships:
  - name: rewardHistories
    using:
      foreign_key_constraint_on:
        column: loyaltyPointTransactionId
        table:
          schema: crm
          name: rewardHistory
- table:
    schema: crm
    name: reward
  object_relationships:
  - name: campaign
    using:
      foreign_key_constraint_on: campaignId
  - name: condition
    using:
      foreign_key_constraint_on: conditionId
  - name: coupon
    using:
      foreign_key_constraint_on: couponId
  array_relationships:
  - name: rewardHistories
    using:
      foreign_key_constraint_on:
        column: rewardId
        table:
          schema: crm
          name: rewardHistory
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - type
      - couponId
      - conditionId
      - priority
      - campaignId
      - rewardValue
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - campaignId
      - conditionId
      - couponId
      - id
      - priority
      - rewardValue
      - type
      filter: {}
- table:
    schema: crm
    name: rewardHistory
  object_relationships:
  - name: campaign
    using:
      foreign_key_constraint_on: campaignId
  - name: coupon
    using:
      foreign_key_constraint_on: couponId
  - name: customer
    using:
      foreign_key_constraint_on: keycloakId
  - name: loyaltyPointTransaction
    using:
      foreign_key_constraint_on: loyaltyPointTransactionId
  - name: order
    using:
      foreign_key_constraint_on: orderId
  - name: reward
    using:
      foreign_key_constraint_on: rewardId
  - name: walletTransaction
    using:
      foreign_key_constraint_on: walletTransactionId
- table:
    schema: crm
    name: rewardType
  array_relationships:
  - name: campaignTypes
    using:
      foreign_key_constraint_on:
        column: rewardTypeId
        table:
          schema: crm
          name: rewardType_campaignType
- table:
    schema: crm
    name: rewardType_campaignType
  object_relationships:
  - name: campaignType
    using:
      foreign_key_constraint_on: campaignTypeId
  - name: rewardType
    using:
      foreign_key_constraint_on: rewardTypeId
- table:
    schema: crm
    name: view_brand_customer
- table:
    schema: crm
    name: wallet
  configuration:
    custom_root_fields:
      insert: createWallets
      select_aggregate: walletsAggregate
      insert_one: createWallet
      select_by_pk: wallet
      select: wallets
      delete: deleteWallets
      update: updateWallets
      delete_by_pk: deleteWallet
      update_by_pk: updateWallet
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  - name: customer
    using:
      foreign_key_constraint_on: keycloakId
  array_relationships:
  - name: walletTransactions
    using:
      foreign_key_constraint_on:
        column: walletId
        table:
          schema: crm
          name: walletTransaction
- table:
    schema: crm
    name: walletTransaction
  configuration:
    custom_root_fields:
      insert: createWalletTransactions
      select_aggregate: walletTransactionsAggregate
      insert_one: createWalletTransaction
      select_by_pk: walletTransaction
      select: walletTransactions
      delete: deleteWalletTransactions
      update: updateWalletTransactions
      delete_by_pk: deleteWalletTransaction
      update_by_pk: updateWalletTransaction
    custom_column_names: {}
  object_relationships:
  - name: customerReferral
    using:
      foreign_key_constraint_on: customerReferralId
  - name: orderCart
    using:
      foreign_key_constraint_on: orderCartId
  - name: wallet
    using:
      foreign_key_constraint_on: walletId
  array_relationships:
  - name: rewardHistories
    using:
      foreign_key_constraint_on:
        column: walletTransactionId
        table:
          schema: crm
          name: rewardHistory
- table:
    schema: datahub_schema
    name: columns
- table:
    schema: datahub_schema
    name: columns_privileges
- table:
    schema: datahub_schema
    name: constraint_column_usage
- table:
    schema: datahub_schema
    name: constraint_table_usage
- table:
    schema: datahub_schema
    name: event_invocation_logs
- table:
    schema: datahub_schema
    name: event_log
- table:
    schema: datahub_schema
    name: event_triggers
- table:
    schema: datahub_schema
    name: hdb_action
- table:
    schema: datahub_schema
    name: hdb_action_log
- table:
    schema: datahub_schema
    name: hdb_action_permission
- table:
    schema: datahub_schema
    name: hdb_computed_field
- table:
    schema: datahub_schema
    name: hdb_cron_event_invocation_logs
- table:
    schema: datahub_schema
    name: hdb_cron_events
- table:
    schema: datahub_schema
    name: hdb_cron_triggers
- table:
    schema: datahub_schema
    name: hdb_custom_types
- table:
    schema: datahub_schema
    name: hdb_function
- table:
    schema: datahub_schema
    name: hdb_permission
- table:
    schema: datahub_schema
    name: hdb_relationship
- table:
    schema: datahub_schema
    name: hdb_remote_relationship
- table:
    schema: datahub_schema
    name: hdb_scheduled_event_invocation_logs
- table:
    schema: datahub_schema
    name: hdb_scheduled_events
- table:
    schema: datahub_schema
    name: hdb_table
- table:
    schema: datahub_schema
    name: key_column_usage
- table:
    schema: datahub_schema
    name: referential_constraints
- table:
    schema: datahub_schema
    name: remote_schemas
- table:
    schema: datahub_schema
    name: role_column_grant
- table:
    schema: datahub_schema
    name: routines
- table:
    schema: datahub_schema
    name: schemata
- table:
    schema: datahub_schema
    name: sequences
- table:
    schema: datahub_schema
    name: table_constraints
- table:
    schema: datahub_schema
    name: table_privileges
- table:
    schema: datahub_schema
    name: tables
- table:
    schema: datahub_schema
    name: triggered_update_column
- table:
    schema: datahub_schema
    name: triggers
- table:
    schema: datahub_schema
    name: view_column_usage
- table:
    schema: datahub_schema
    name: view_routine_usage
- table:
    schema: datahub_schema
    name: view_table_usage
- table:
    schema: datahub_schema
    name: views
- table:
    schema: deviceHub
    name: computer
  configuration:
    custom_root_fields:
      insert: createComputers
      select_aggregate: computersAggregate
      insert_one: createComputer
      select_by_pk: computer
      select: computers
      delete: deleteComputers
      update: updateComputers
      delete_by_pk: deleteComputer
      update_by_pk: updateComputer
    custom_column_names: {}
  array_relationships:
  - name: printers
    using:
      foreign_key_constraint_on:
        column: computerId
        table:
          schema: deviceHub
          name: printer
  - name: scales
    using:
      foreign_key_constraint_on:
        column: computerId
        table:
          schema: deviceHub
          name: scale
- table:
    schema: deviceHub
    name: config
  configuration:
    custom_root_fields:
      insert: createConfigs
      select_aggregate: conifgsAggregate
      insert_one: createConfig
      select_by_pk: config
      select: configs
      delete: deleteConfigs
      update: updateConfigs
      delete_by_pk: deleteConfig
      update_by_pk: updateConfig
    custom_column_names: {}
- table:
    schema: deviceHub
    name: labelTemplate
  configuration:
    custom_root_fields:
      insert: createLabelTemplates
      select_aggregate: labelTemplatesAggregate
      select_by_pk: labelTemplate
      select: labelTemplates
      delete: deleteLabelTemplates
      update: updateLabelTemplates
    custom_column_names: {}
- table:
    schema: deviceHub
    name: printer
  configuration:
    custom_root_fields:
      insert: createPrinters
      select_aggregate: printersAggregate
      insert_one: createPrinter
      select_by_pk: printer
      select: printers
      delete: deletePrinters
      update: updatePrinters
      delete_by_pk: deletePrinter
      update_by_pk: updatePrinter
    custom_column_names: {}
  object_relationships:
  - name: computer
    using:
      foreign_key_constraint_on: computerId
  array_relationships:
  - name: attachedStations_kot
    using:
      foreign_key_constraint_on:
        column: printNodeId
        table:
          schema: settings
          name: station_kot_printer
  - name: attachedStations_label
    using:
      foreign_key_constraint_on:
        column: printNodeId
        table:
          schema: settings
          name: station_label_printer
  - name: defaultStation_kot
    using:
      foreign_key_constraint_on:
        column: defaultKotPrinterId
        table:
          schema: settings
          name: station
  - name: defaultStation_label
    using:
      foreign_key_constraint_on:
        column: defaultLabelPrinterId
        table:
          schema: settings
          name: station
- table:
    schema: deviceHub
    name: printerType
  array_relationships:
  - name: printers
    using:
      foreign_key_constraint_on:
        column: printerType
        table:
          schema: deviceHub
          name: printer
- table:
    schema: deviceHub
    name: scale
  configuration:
    custom_root_fields:
      insert: createScales
      select_aggregate: scalesAggregate
      insert_one: createScale
      select_by_pk: scale
      select: scales
      delete: deleteScales
      update: updateScales
      delete_by_pk: deleteScale
      update_by_pk: updateScale
    custom_column_names: {}
  object_relationships:
  - name: assignedStation
    using:
      foreign_key_constraint_on: stationId
  - name: computer
    using:
      foreign_key_constraint_on: computerId
- table:
    schema: editor
    name: block
  object_relationships:
  - name: blockFile
    using:
      manual_configuration:
        remote_table:
          schema: editor
          name: file
        column_mapping:
          fileId: id
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - name
      - path
      - assets
      - fileId
      - category
      - created_at
      - updated_at
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - id
      - name
      - path
      - assets
      - fileId
      - category
      - created_at
      - updated_at
      filter: {}
- table:
    schema: editor
    name: cssFileLinks
  object_relationships:
  - name: cssFile
    using:
      manual_configuration:
        remote_table:
          schema: editor
          name: file
        column_mapping:
          cssFileId: id
  - name: parentFile
    using:
      manual_configuration:
        remote_table:
          schema: editor
          name: file
        column_mapping:
          guiFileId: id
  select_permissions:
  - role: consumer
    permission:
      columns:
      - guiFileId
      - cssFileId
      - position
      - created_at
      - updated_at
      - id
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - cssFileId
      - guiFileId
      - id
      - position
      - created_at
      - updated_at
      filter: {}
- table:
    schema: editor
    name: file
  array_relationships:
  - name: linkedCssFiles
    using:
      manual_configuration:
        remote_table:
          schema: editor
          name: cssFileLinks
        column_mapping:
          id: guiFileId
  - name: linkedJsFiles
    using:
      manual_configuration:
        remote_table:
          schema: editor
          name: jsFileLinks
        column_mapping:
          id: guiFileId
  - name: linkedParentFilesAsCss
    using:
      manual_configuration:
        remote_table:
          schema: editor
          name: cssFileLinks
        column_mapping:
          id: cssFileId
  - name: linkedParentFilesAsJs
    using:
      manual_configuration:
        remote_table:
          schema: editor
          name: jsFileLinks
        column_mapping:
          id: jsFileId
  - name: subscriptionDivId
    using:
      foreign_key_constraint_on:
        column: fileId
        table:
          schema: content
          name: subscriptionDivIds
  - name: websitePageModules
    using:
      foreign_key_constraint_on:
        column: fileId
        table:
          schema: website
          name: websitePageModule
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - path
      - created_at
      - updated_at
      - fileType
      - commits
      - lastSaved
      - fileName
      - isTemplate
      - isBlock
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - isBlock
      - isTemplate
      - id
      - commits
      - fileName
      - fileType
      - path
      - created_at
      - lastSaved
      - updated_at
      filter: {}
- table:
    schema: editor
    name: jsFileLinks
  object_relationships:
  - name: guiFile
    using:
      manual_configuration:
        remote_table:
          schema: editor
          name: file
        column_mapping:
          guiFileId: id
  - name: jsFile
    using:
      manual_configuration:
        remote_table:
          schema: editor
          name: file
        column_mapping:
          jsFileId: id
  select_permissions:
  - role: consumer
    permission:
      columns:
      - guiFileId
      - jsFileId
      - position
      - created_at
      - updated_at
      - id
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - guiFileId
      - id
      - jsFileId
      - position
      - created_at
      - updated_at
      filter: {}
- table:
    schema: editor
    name: linkedFiles
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - records
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - id
      - records
      filter: {}
- table:
    schema: editor
    name: priorityFuncTable
- table:
    schema: editor
    name: template
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - name
      - route
      - thumbnail
      - type
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - id
      - name
      - route
      - thumbnail
      - type
      filter: {}
      allow_aggregations: true
- table:
    schema: fulfilment
    name: brand_recurrence
  configuration:
    custom_root_fields:
      insert: createBrandRecurrences
      select_aggregate: brandRecurrencesAggregate
      insert_one: createBrandRecurrence
      select_by_pk: brandRecurrence
      select: brandRecurrences
      delete: deleteBrandRecurrences
      update: updateBrandRecurrences
      delete_by_pk: deleteBrandRecurrence
      update_by_pk: updateBrandRecurrence
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  - name: recurrence
    using:
      foreign_key_constraint_on: recurrenceId
- table:
    schema: fulfilment
    name: charge
  configuration:
    custom_root_fields:
      insert: createCharges
      select_aggregate: chargesAggregate
      insert_one: createCharge
      select_by_pk: chargeByPK
      select: charges
      delete: deleteCharge
      update: updateCharge
      delete_by_pk: deleteChargeByPK
      update_by_pk: updateChargeByPK
    custom_column_names: {}
  object_relationships:
  - name: mileRange
    using:
      foreign_key_constraint_on: mileRangeId
  array_relationships:
  - name: deliveryOptions
    using:
      foreign_key_constraint_on:
        column: chargeId
        table:
          schema: fulfilment
          name: deliveryPreferenceByCharge
- table:
    schema: fulfilment
    name: deliveryPreferenceByCharge
  object_relationships:
  - name: charge
    using:
      foreign_key_constraint_on: chargeId
  - name: deliveryService
    using:
      foreign_key_constraint_on: clauseId
- table:
    schema: fulfilment
    name: deliveryService
  configuration:
    custom_root_fields:
      insert: createDeliveryServices
      select_aggregate: deliveryServiceAggregate
      insert_one: createDeliveryService
      select_by_pk: deliveryService
      select: deliveryServices
      delete: deleteDeliveryServices
      update: updateDeliveryServices
      delete_by_pk: deleteDeliveryService
      update_by_pk: updateDeliveryService
    custom_column_names: {}
  array_relationships:
  - name: orders
    using:
      foreign_key_constraint_on:
        column: deliveryPartnershipId
        table:
          schema: order
          name: order
- table:
    schema: fulfilment
    name: fulfillmentType
  configuration:
    custom_root_fields:
      select_aggregate: fulfillmentTypeAggregates
      select_by_pk: fulfillmentType
      select: fulfillmentTypes
    custom_column_names: {}
  array_relationships:
  - name: recurrences
    using:
      foreign_key_constraint_on:
        column: type
        table:
          schema: fulfilment
          name: recurrence
- table:
    schema: fulfilment
    name: mileRange
  configuration:
    custom_root_fields:
      insert: createMileRanges
      select_aggregate: mileRangesAggregate
      insert_one: createMileRange
      select_by_pk: mileRangeByPK
      select: mileRanges
      delete: deleteMileRange
      update: updateMileRange
      delete_by_pk: deleteMileRangeByPK
      update_by_pk: updateMileRangeByPK
    custom_column_names: {}
  object_relationships:
  - name: timeSlot
    using:
      foreign_key_constraint_on: timeSlotId
  array_relationships:
  - name: charges
    using:
      foreign_key_constraint_on:
        column: mileRangeId
        table:
          schema: fulfilment
          name: charge
  computed_fields:
  - name: preOrderDeliveryValidity
    definition:
      function:
        schema: fulfilment
        name: preOrderDeliveryValidity
    comment: ""
- table:
    schema: fulfilment
    name: recurrence
  configuration:
    custom_root_fields:
      insert: createRecurrences
      select_aggregate: recurrenceAggregate
      insert_one: createRecurrence
      select_by_pk: recurrenceByPK
      select: recurrences
      delete: deleteRecurrence
      update: updateRecurrence
      delete_by_pk: deleteRecurrenceByPK
      update_by_pk: updateRecurrenceByPK
    custom_column_names: {}
  array_relationships:
  - name: brands
    using:
      foreign_key_constraint_on:
        column: recurrenceId
        table:
          schema: fulfilment
          name: brand_recurrence
  - name: timeSlots
    using:
      foreign_key_constraint_on:
        column: recurrenceId
        table:
          schema: fulfilment
          name: timeSlot
- table:
    schema: fulfilment
    name: timeSlot
  configuration:
    custom_root_fields:
      insert: createTimeSlots
      select_aggregate: timeSlotsAggregate
      insert_one: createTimeSlot
      select_by_pk: timeSlotByPK
      select: timeSlots
      delete: deleteTimeSlot
      update: updateTimeSlot
      delete_by_pk: deleteTimeSlotByPK
      update_by_pk: updateTimeSlotByPK
    custom_column_names: {}
  object_relationships:
  - name: recurrence
    using:
      foreign_key_constraint_on: recurrenceId
  array_relationships:
  - name: mileRanges
    using:
      foreign_key_constraint_on:
        column: timeSlotId
        table:
          schema: fulfilment
          name: mileRange
  computed_fields:
  - name: preOrderPickupValidity
    definition:
      function:
        schema: fulfilment
        name: preOrderPickupValidity
    comment: ""
- table:
    schema: imports
    name: import
  event_triggers:
  - name: Bulk_Imports
    definition:
      enable_manual: false
      update:
        columns:
        - confirm
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: http://example.com
- table:
    schema: imports
    name: importHistory
  configuration:
    custom_root_fields:
      insert: createImportHistory
    custom_column_names: {}
  object_relationships:
  - name: import
    using:
      foreign_key_constraint_on: importId
  array_relationships:
  - name: supplierItems
    using:
      foreign_key_constraint_on:
        column: importId
        table:
          schema: inventory
          name: supplierItem
  - name: suppliers
    using:
      foreign_key_constraint_on:
        column: importId
        table:
          schema: inventory
          name: supplier
- table:
    schema: ingredient
    name: ingredient
  configuration:
    custom_root_fields:
      insert: createIngredient
      select_aggregate: ingredientsAggregate
      select_by_pk: ingredient
      select: ingredients
      delete: deleteIngredient
      update: updateIngredient
    custom_column_names: {}
  array_relationships:
  - name: cartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: ingredientId
  - name: ingredientProcessings
    using:
      foreign_key_constraint_on:
        column: ingredientId
        table:
          schema: ingredient
          name: ingredientProcessing
  - name: ingredientSachets
    using:
      foreign_key_constraint_on:
        column: ingredientId
        table:
          schema: ingredient
          name: ingredientSachet
  - name: ingredientSachetViews
    using:
      manual_configuration:
        remote_table:
          schema: ingredient
          name: ingredientSachetView
        column_mapping:
          id: ingredientId
  computed_fields:
  - name: isValid
    definition:
      function:
        schema: ingredient
        name: isingredientvalid
    comment: ""
- table:
    schema: ingredient
    name: ingredientProcessing
  configuration:
    custom_root_fields:
      insert: createIngredientProcessing
      select_aggregate: ingredientProcessingsAggregate
      select_by_pk: ingredientProcessing
      select: ingredientProcessings
      delete: deleteIngredientProcessing
      update: updateIngredientProcessing
    custom_column_names: {}
  object_relationships:
  - name: ingredient
    using:
      foreign_key_constraint_on: ingredientId
  - name: processing
    using:
      foreign_key_constraint_on: processingName
  array_relationships:
  - name: cartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: ingredientProcessingId
  - name: ingredientSachets
    using:
      foreign_key_constraint_on:
        column: ingredientProcessingId
        table:
          schema: ingredient
          name: ingredientSachet
  - name: ingredientSachetViews
    using:
      manual_configuration:
        remote_table:
          schema: ingredient
          name: ingredientSachetView
        column_mapping:
          id: ingredientProcessingId
- table:
    schema: ingredient
    name: ingredientProcessingView
- table:
    schema: ingredient
    name: ingredientSacahet_recipeHubSachet
- table:
    schema: ingredient
    name: ingredientSachet
  configuration:
    custom_root_fields:
      insert: createIngredientSachet
      select_aggregate: ingredientSachetsAggregate
      select_by_pk: ingredientSachet
      select: ingredientSachets
      delete: deleteIngredientSachet
      update: updateIngredientSachet
    custom_column_names: {}
  object_relationships:
  - name: ingredient
    using:
      foreign_key_constraint_on: ingredientId
  - name: ingredientProcessing
    using:
      foreign_key_constraint_on: ingredientProcessingId
  - name: liveModeOfFulfillment
    using:
      foreign_key_constraint_on: liveMOF
  - name: unitId
    using:
      foreign_key_constraint_on: unit
  array_relationships:
  - name: cartItems
    using:
      foreign_key_constraint_on:
        column: ingredientSachetId
        table:
          schema: order
          name: cartItem
  - name: cartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: ingredientSachetId
  - name: modeOfFulfillments
    using:
      foreign_key_constraint_on:
        column: ingredientSachetId
        table:
          schema: ingredient
          name: modeOfFulfillment
  - name: recipeYields
    using:
      foreign_key_constraint_on:
        column: ingredientSachetId
        table:
          schema: simpleRecipe
          name: simpleRecipeYield_ingredientSachet
  computed_fields:
  - name: isValid
    definition:
      function:
        schema: ingredient
        name: issachetvalid
    comment: ""
  - name: nutritionalInfo
    definition:
      function:
        schema: ingredient
        name: nutritionalInfo
    comment: ""
  - name: cost
    definition:
      function:
        schema: ingredient
        name: cost
    comment: ""
  remote_relationships:
  - definition:
      remote_field:
        matches_sachetIngredientSachetMatch_aggregate:
          arguments:
            where:
              organizationIngredientSachetId:
                _eq: $id
      hasura_fields:
      - id
      remote_schema: dailycloak
    name: recipehubSachetMatch
  event_triggers:
  - name: ingredientSachetModified
    definition:
      enable_manual: false
      insert:
        columns: '*'
      delete:
        columns: '*'
      update:
        columns:
        - isArchived
        - tracking
        - visibility
        - id
        - ingredientId
        - ingredientProcessingId
        - liveMOF
        - quantity
        - unit
        - createdAt
        - updatedAt
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: https://8cb6ae38d5ed.ngrok.io/match/check
- table:
    schema: ingredient
    name: ingredientSachetView
  array_relationships:
  - name: cartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: ingredientSachetId
- table:
    schema: ingredient
    name: modeOfFulfillment
  configuration:
    custom_root_fields:
      insert: createModeOfFulfillments
      select_aggregate: modeOfFulfillmentsAggregate
      insert_one: createModeOfFulfillment
      select_by_pk: modeOfFulfillment
      select: modeOfFulfillments
      delete: deleteModeOfFulfillments
      update: updateModeOfFulfillments
      delete_by_pk: deleteModeOfFulfillment
      update_by_pk: updateModeOfFulfillment
    custom_column_names: {}
  object_relationships:
  - name: bulkItem
    using:
      foreign_key_constraint_on: bulkItemId
  - name: ingredientSachet
    using:
      foreign_key_constraint_on: ingredientSachetId
  - name: labelTemplate
    using:
      foreign_key_constraint_on: labelTemplateId
  - name: operationConfig
    using:
      foreign_key_constraint_on: operationConfigId
  - name: packaging
    using:
      foreign_key_constraint_on: packagingId
  - name: sachetItem
    using:
      foreign_key_constraint_on: sachetItemId
  - name: station
    using:
      foreign_key_constraint_on: stationId
  computed_fields:
  - name: isValid
    definition:
      function:
        schema: ingredient
        name: ismodevalid
    comment: ""
  - name: nutritionalInfo
    definition:
      function:
        schema: ingredient
        name: getMOFNutritionalInfo
    comment: ""
  - name: cost
    definition:
      function:
        schema: ingredient
        name: getMOFCost
    comment: ""
  event_triggers:
  - name: mofUpdate
    definition:
      enable_manual: false
      insert:
        columns: '*'
      update:
        columns:
        - isLive
        - isPublished
        - position
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/mof/live'
- table:
    schema: ingredient
    name: modeOfFulfillmentEnum
- table:
    schema: insights
    name: app_module_insight
  object_relationships:
  - name: insight
    using:
      foreign_key_constraint_on: insightIdentifier
- table:
    schema: insights
    name: chart
  object_relationships:
  - name: insight
    using:
      foreign_key_constraint_on: insightIdentifier
- table:
    schema: insights
    name: date
  object_relationships:
  - name: DayName
    using:
      foreign_key_constraint_on: day
  array_relationships:
  - name: orders
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: order
        column_mapping:
          date: created_at
- table:
    schema: insights
    name: day
  array_relationships:
  - name: dates
    using:
      foreign_key_constraint_on:
        column: day
        table:
          schema: insights
          name: date
- table:
    schema: insights
    name: hour
- table:
    schema: insights
    name: insights
  configuration:
    custom_root_fields:
      select_by_pk: insight
    custom_column_names: {}
  array_relationships:
  - name: apps_modules
    using:
      foreign_key_constraint_on:
        column: insightIdentifier
        table:
          schema: insights
          name: app_module_insight
  - name: charts
    using:
      foreign_key_constraint_on:
        column: insightIdentifier
        table:
          schema: insights
          name: chart
- table:
    schema: insights
    name: month
- table:
    schema: instructions
    name: instructionSet
  configuration:
    custom_root_fields:
      insert: createInstructionSets
      select_aggregate: instructionSetsAggregate
      insert_one: createInstructionSet
      select_by_pk: instructionSet
      select: instructionSets
      delete: deleteInstructionSets
      update: updateInstructionSets
      delete_by_pk: deleteInstructionSet
      update_by_pk: updateInstructionSet
    custom_column_names: {}
  object_relationships:
  - name: simpleRecipe
    using:
      foreign_key_constraint_on: simpleRecipeId
  array_relationships:
  - name: instructionSteps
    using:
      foreign_key_constraint_on:
        column: instructionSetId
        table:
          schema: instructions
          name: instructionStep
- table:
    schema: instructions
    name: instructionStep
  configuration:
    custom_root_fields:
      insert: createInstructionSteps
      select_aggregate: instructionStepsAggregate
      insert_one: createInstructionStep
      select_by_pk: instructionStep
      select: instructionSteps
      delete: deleteInstructionSteps
      update: updateInstructionSteps
      delete_by_pk: deleteInstructionStep
      update_by_pk: updateInstructionStep
    custom_column_names: {}
- table:
    schema: inventory
    name: bulkItem
  configuration:
    custom_root_fields:
      insert: createBulkItem
      select_aggregate: bulkItemsAggregate
      select_by_pk: bulkItem
      select: bulkItems
      delete: deleteBulkItem
      update: updateBulkItem
    custom_column_names: {}
  object_relationships:
  - name: processing
    using:
      foreign_key_constraint_on: processingName
  - name: supplierItem
    using:
      foreign_key_constraint_on: supplierItemId
  - name: unitId
    using:
      foreign_key_constraint_on: unit
  array_relationships:
  - name: bulkItemHistories
    using:
      foreign_key_constraint_on:
        column: bulkItemId
        table:
          schema: inventory
          name: bulkItemHistory
  - name: bulkItem_unitConversions
    using:
      foreign_key_constraint_on:
        column: entityId
        table:
          schema: inventory
          name: bulkItem_unitConversion
  - name: modeOfFulfillments
    using:
      foreign_key_constraint_on:
        column: bulkItemId
        table:
          schema: ingredient
          name: modeOfFulfillment
  - name: purchaseOrderItems
    using:
      foreign_key_constraint_on:
        column: bulkItemId
        table:
          schema: inventory
          name: purchaseOrderItem
  - name: sachetItems
    using:
      foreign_key_constraint_on:
        column: bulkItemId
        table:
          schema: inventory
          name: sachetItem
  - name: sachetWorkOrders
    using:
      foreign_key_constraint_on:
        column: inputBulkItemId
        table:
          schema: inventory
          name: sachetWorkOrder
  - name: unitConversions
    using:
      foreign_key_constraint_on:
        column: bulkItemId
        table:
          schema: inventory
          name: unitConversionByBulkItem
  - name: workOrdersAsInput
    using:
      foreign_key_constraint_on:
        column: inputBulkItemId
        table:
          schema: inventory
          name: bulkWorkOrder
  - name: workOrdersAsOutput
    using:
      foreign_key_constraint_on:
        column: outputBulkItemId
        table:
          schema: inventory
          name: bulkWorkOrder
  event_triggers:
  - name: bulkItemUpdate
    definition:
      enable_manual: false
      update:
        columns:
        - isAvailable
        - onHand
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/mof/update'
- table:
    schema: inventory
    name: bulkItemHistory
  configuration:
    custom_root_fields:
      insert: createBulkItemHistory
      select_aggregate: bulkItemHistoriesAggregate
      select_by_pk: bulkItemHistory
      select: bulkItemHistories
      delete: deleteBulkItemHistory
      update: updateBulkItemHistory
    custom_column_names: {}
  object_relationships:
  - name: bulkItem
    using:
      foreign_key_constraint_on: bulkItemId
  - name: bulkWorkOrder
    using:
      foreign_key_constraint_on: bulkWorkOrderId
  - name: purchaseOrderItem
    using:
      foreign_key_constraint_on: purchaseOrderItemId
  - name: sachetWorkOrder
    using:
      foreign_key_constraint_on: sachetWorkOrderId
  - name: unitId
    using:
      foreign_key_constraint_on: unit
  event_triggers:
  - name: BulkItemHistoryCreateUpdate
    definition:
      enable_manual: true
      insert:
        columns: '*'
      update:
        columns:
        - bulkItemId
        - bulkWorkOrderId
        - id
        - orderSachetId
        - purchaseOrderItemId
        - comment
        - quantity
        - status
        - unit
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/inventory/bulk-item-history-upsert'
- table:
    schema: inventory
    name: bulkItemView
- table:
    schema: inventory
    name: bulkItem_unitConversion
  object_relationships:
  - name: bulkItem
    using:
      foreign_key_constraint_on: entityId
  - name: unitConversion
    using:
      foreign_key_constraint_on: unitConversionId
- table:
    schema: inventory
    name: bulkWorkOrder
  configuration:
    custom_root_fields:
      insert: createBulkWorkOrder
      select_aggregate: bulkWorkOrdersAggregate
      select_by_pk: bulkWorkOrder
      select: bulkWorkOrders
      delete: deleteBulkWorkOrder
      update: updateBulkWorkOrder
    custom_column_names: {}
  object_relationships:
  - name: inputBulkItem
    using:
      foreign_key_constraint_on: inputBulkItemId
  - name: inputQuantityUnitId
    using:
      foreign_key_constraint_on: inputQuantityUnit
  - name: outputBulkItem
    using:
      foreign_key_constraint_on: outputBulkItemId
  - name: station
    using:
      foreign_key_constraint_on: stationId
  - name: supplierItem
    using:
      foreign_key_constraint_on: supplierItemId
  - name: user
    using:
      foreign_key_constraint_on: userId
  array_relationships:
  - name: bulkItemHistories
    using:
      foreign_key_constraint_on:
        column: bulkWorkOrderId
        table:
          schema: inventory
          name: bulkItemHistory
  event_triggers:
  - name: BulkWorkOrderCreateUpdate
    definition:
      enable_manual: true
      insert:
        columns: '*'
      update:
        columns:
        - id
        - inputBulkItemId
        - outputBulkItemId
        - userId
        - inputQuantity
        - outputQuantity
        - inputQuantityUnit
        - status
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/inventory/bulk-work-order-upsert'
- table:
    schema: inventory
    name: packagingHistory
  object_relationships:
  - name: packaging
    using:
      foreign_key_constraint_on: packagingId
  - name: purchaseOrderItem
    using:
      foreign_key_constraint_on: purchaseOrderItemId
  event_triggers:
  - name: packagingHistory
    definition:
      enable_manual: true
      insert:
        columns: '*'
      update:
        columns:
        - id
        - packagingId
        - purchaseOrderItemId
        - quantity
        - status
        - unit
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/inventory/packaging-history-upsert'
- table:
    schema: inventory
    name: purchaseOrderItem
  configuration:
    custom_root_fields:
      insert: createPurchaseOrderItem
      select_aggregate: purchaseOrderItemsAggregate
      select_by_pk: purchaseOrderItem
      select: purchaseOrderItems
      delete: deletePurchaseOrderItem
      update: updatePurchaseOrderItem
    custom_column_names: {}
  object_relationships:
  - name: bulkItem
    using:
      foreign_key_constraint_on: bulkItemId
  - name: packaging
    using:
      foreign_key_constraint_on: packagingId
  - name: supplier
    using:
      foreign_key_constraint_on: supplierId
  - name: supplierItem
    using:
      foreign_key_constraint_on: supplierItemId
  - name: unitId
    using:
      foreign_key_constraint_on: unit
  array_relationships:
  - name: packagingHistories
    using:
      foreign_key_constraint_on:
        column: purchaseOrderItemId
        table:
          schema: inventory
          name: packagingHistory
  event_triggers:
  - name: purchaseOrderItemCreateUpdate
    definition:
      enable_manual: true
      update:
        columns:
        - bulkItemId
        - id
        - mandiPurchaseOrderItemId
        - packagingId
        - supplierId
        - supplierItemId
        - details
        - orderQuantity
        - status
        - unit
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/inventory/purchase-order-upsert'
- table:
    schema: inventory
    name: sachetItem
  configuration:
    custom_root_fields:
      insert: createSachetItem
      select_aggregate: sachetItemsAggregate
      select_by_pk: sachetItem
      select: sachetItems
      delete: deleteSachetItem
      update: updateSachetItem
    custom_column_names: {}
  object_relationships:
  - name: bulkItem
    using:
      foreign_key_constraint_on: bulkItemId
  - name: unitId
    using:
      foreign_key_constraint_on: unit
  array_relationships:
  - name: modeOfFulfillments
    using:
      foreign_key_constraint_on:
        column: sachetItemId
        table:
          schema: ingredient
          name: modeOfFulfillment
  - name: sachetItemHistories
    using:
      foreign_key_constraint_on:
        column: sachetItemId
        table:
          schema: inventory
          name: sachetItemHistory
  - name: sachetWorkOrders
    using:
      foreign_key_constraint_on:
        column: outputSachetItemId
        table:
          schema: inventory
          name: sachetWorkOrder
  remote_relationships:
  - definition:
      remote_field:
        matches_ingredientSachetItemMatch_aggregate:
          arguments:
            where:
              organizationSachetItemId:
                _eq: $id
      hasura_fields:
      - id
      remote_schema: dailycloak
    name: recipehubIngredientMatch
  - definition:
      remote_field:
        matches_sachetSachetItemMatch_aggregate:
          arguments:
            where:
              organizationSachetItemId:
                _eq: $id
      hasura_fields:
      - id
      remote_schema: dailycloak
    name: recipehubSachetMatch
  event_triggers:
  - name: sachetItemModified
    definition:
      enable_manual: true
      insert:
        columns: '*'
      delete:
        columns: '*'
      update:
        columns:
        - isArchived
        - isAvailable
        - bulkItemId
        - id
        - awaiting
        - committed
        - consumed
        - maxLevel
        - onHand
        - parLevel
        - unitSize
        - unit
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: https://8cb6ae38d5ed.ngrok.io/match/check
    headers:
    - name: organizationid
      value_from_env: HEADER_REMOTE_SCHEMA_ORGANIZATIONID
  - name: sachetItemUpdate
    definition:
      enable_manual: false
      update:
        columns:
        - isAvailable
        - onHand
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/mof/update'
- table:
    schema: inventory
    name: sachetItemHistory
  configuration:
    custom_root_fields:
      insert: createSachetItemHistory
      select_aggregate: sachetItemHistoriesAggregate
      select_by_pk: sachetItemHistory
      select: sachetItemHistories
      delete: deleteSachetItemHistory
      update: updateSachetItemHistory
    custom_column_names: {}
  object_relationships:
  - name: sachetItem
    using:
      foreign_key_constraint_on: sachetItemId
  - name: sachetWorkOrder
    using:
      foreign_key_constraint_on: sachetWorkOrderId
  - name: unitId
    using:
      foreign_key_constraint_on: unit
  event_triggers:
  - name: SachetItemHistoryCreateUpdate
    definition:
      enable_manual: true
      insert:
        columns: '*'
      update:
        columns:
        - id
        - orderSachetId
        - sachetItemId
        - sachetWorkOrderId
        - quantity
        - status
        - unit
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/inventory/sachet-item-history-upsert'
- table:
    schema: inventory
    name: sachetItemView
  array_relationships:
  - name: cartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: sachetItemId
- table:
    schema: inventory
    name: sachetWorkOrder
  configuration:
    custom_root_fields:
      insert: createSachetWorkOrder
      select_aggregate: sachetWorkOrdersAggregate
      select_by_pk: sachetWorkOrder
      select: sachetWorkOrders
      delete: deleteSachetWorkOrder
      update: updateSachetWorkOrder
    custom_column_names: {}
  object_relationships:
  - name: bulkItem
    using:
      foreign_key_constraint_on: inputBulkItemId
  - name: outputSachetItem
    using:
      foreign_key_constraint_on: outputSachetItemId
  - name: packaging
    using:
      foreign_key_constraint_on: packagingId
  - name: station
    using:
      foreign_key_constraint_on: stationId
  - name: supplierItem
    using:
      foreign_key_constraint_on: supplierItemId
  - name: user
    using:
      foreign_key_constraint_on: userId
  array_relationships:
  - name: bulkItemHistories
    using:
      foreign_key_constraint_on:
        column: sachetWorkOrderId
        table:
          schema: inventory
          name: bulkItemHistory
  - name: sachetItemHistories
    using:
      foreign_key_constraint_on:
        column: sachetWorkOrderId
        table:
          schema: inventory
          name: sachetItemHistory
  event_triggers:
  - name: SachetWorkOrderCreateUpdate
    definition:
      enable_manual: true
      insert:
        columns: '*'
      update:
        columns:
        - id
        - inputBulkItemId
        - outputSachetItemId
        - stationId
        - userId
        - inputQuantity
        - outputQuantity
        - status
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/inventory/sachet-work-order-upsert'
- table:
    schema: inventory
    name: supplier
  configuration:
    custom_root_fields:
      insert: createSupplier
      select_aggregate: suppliersAggregate
      select_by_pk: supplier
      select: suppliers
      delete: deleteSupplier
      update: updateSupplier
    custom_column_names: {}
  object_relationships:
  - name: importHistory
    using:
      foreign_key_constraint_on: importId
  array_relationships:
  - name: packagings
    using:
      foreign_key_constraint_on:
        column: supplierId
        table:
          schema: packaging
          name: packaging
  - name: purchaseOrderItems
    using:
      foreign_key_constraint_on:
        column: supplierId
        table:
          schema: inventory
          name: purchaseOrderItem
  - name: supplierItems
    using:
      foreign_key_constraint_on:
        column: supplierId
        table:
          schema: inventory
          name: supplierItem
- table:
    schema: inventory
    name: supplierItem
  configuration:
    custom_root_fields:
      insert: createSupplierItem
      select_aggregate: supplierItemsAggregate
      select_by_pk: supplierItem
      select: supplierItems
      delete: deleteSupplierItem
      update: updateSupplierItem
    custom_column_names: {}
  object_relationships:
  - name: bulkItemAsShipped
    using:
      manual_configuration:
        remote_table:
          schema: inventory
          name: bulkItem
        column_mapping:
          bulkItemAsShippedId: id
  - name: importHistory
    using:
      foreign_key_constraint_on: importId
  - name: supplier
    using:
      foreign_key_constraint_on: supplierId
  - name: unitId
    using:
      foreign_key_constraint_on: unit
  array_relationships:
  - name: bulkItems
    using:
      foreign_key_constraint_on:
        column: supplierItemId
        table:
          schema: inventory
          name: bulkItem
  - name: purchaseOrderItems
    using:
      foreign_key_constraint_on:
        column: supplierItemId
        table:
          schema: inventory
          name: purchaseOrderItem
  computed_fields:
  - name: unit_conversions
    definition:
      function:
        schema: inventory
        name: unit_conversions_supplier_item
    comment: ""
  remote_relationships:
  - definition:
      remote_field:
        matches_ingredientSupplierItemMatch_aggregate:
          arguments:
            where:
              organizationSupplierItemId:
                _eq: $id
      hasura_fields:
      - id
      remote_schema: dailycloak
    name: recipehubIngredientMatch
  - definition:
      remote_field:
        matches_sachetSupplierItemMatch_aggregate:
          arguments:
            where:
              organizationSupplierItemId:
                _eq: $id
      hasura_fields:
      - id
      remote_schema: dailycloak
    name: recipehubSachetMatch
  event_triggers:
  - name: supplierItemModified
    definition:
      enable_manual: true
      insert:
        columns: '*'
      delete:
        columns: '*'
      update:
        columns:
        - isArchived
        - bulkItemAsShippedId
        - id
        - importId
        - supplierId
        - unitSize
        - certificates
        - leadTime
        - prices
        - name
        - sku
        - unit
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: https://8cb6ae38d5ed.ngrok.io/match/check
    headers:
    - name: organizationid
      value_from_env: HEADER_REMOTE_SCHEMA_ORGANIZATIONID
- table:
    schema: inventory
    name: supplierItemView
  object_relationships:
  - name: supplier
    using:
      manual_configuration:
        remote_table:
          schema: inventory
          name: supplier
        column_mapping:
          supplierId: id
- table:
    schema: inventory
    name: supplierItem_unitConversion
- table:
    schema: inventory
    name: unitConversionByBulkItem
  configuration:
    custom_root_fields:
      insert: createUnitConversionByBulkItem
      select_aggregate: unitConversionByBulkItemsAggregate
      select_by_pk: unitConversionByBulkItem
      select: unitConversionByBulkItems
      delete: deleteUnitConversionByBulkItem
      update: updateUnitConversionByBulkItem
    custom_column_names: {}
  object_relationships:
  - name: bulkItem
    using:
      foreign_key_constraint_on: bulkItemId
  - name: unitConversion
    using:
      foreign_key_constraint_on: unitConversionId
- table:
    schema: master
    name: accompanimentType
  configuration:
    custom_root_fields:
      insert: createAccompaniments
      select_aggregate: accompanimentsAggregate
      insert_one: createAccompaniment
      select_by_pk: accompaniment
      select: accompaniments
      delete: deleteAccompaniments
      update: updateAccompaniments
      delete_by_pk: deleteAccompaniment
      update_by_pk: updateAccompaniment
    custom_column_names: {}
- table:
    schema: master
    name: allergenName
  configuration:
    custom_root_fields:
      insert: createMasterAllergen
      select_aggregate: masterAllergensAggregate
      select_by_pk: masterAllergen
      select: masterAllergens
      delete: deleteMasterAllergen
      update: updateMasterAllergen
    custom_column_names: {}
- table:
    schema: master
    name: cuisineName
  configuration:
    custom_root_fields:
      insert: createCuisineName
      select_aggregate: cuisineNamesAggregate
      select_by_pk: cuisineName
      select: cuisineNames
      delete: deleteCuisineName
      update: updateCuisineName
    custom_column_names: {}
  array_relationships:
  - name: simpleRecipes
    using:
      foreign_key_constraint_on:
        column: cuisine
        table:
          schema: simpleRecipe
          name: simpleRecipe
- table:
    schema: master
    name: processingName
  configuration:
    custom_root_fields:
      insert: createMasterProcessing
      select_aggregate: masterProcessingsAggregate
      select_by_pk: masterProcessing
      select: masterProcessings
      delete: deleteMasterProcessing
      update: updateMasterProcessing
    custom_column_names: {}
  array_relationships:
  - name: bulkItems
    using:
      foreign_key_constraint_on:
        column: processingName
        table:
          schema: inventory
          name: bulkItem
  - name: ingredientProcessings
    using:
      foreign_key_constraint_on:
        column: processingName
        table:
          schema: ingredient
          name: ingredientProcessing
- table:
    schema: master
    name: productCategory
  configuration:
    custom_root_fields:
      insert: insertProductCategories
      select_aggregate: productCategoriesAggregate
      insert_one: insertProductCategory
      select_by_pk: productCategory
      select: productCategories
      delete: deleteProductCategory
      update: updateProductCategories
      delete_by_pk: deleteProductCategories
      update_by_pk: updateProductCategory
    custom_column_names: {}
  array_relationships:
  - name: collections
    using:
      foreign_key_constraint_on:
        column: productCategoryName
        table:
          schema: onDemand
          name: collection_productCategory
  - name: subscriptionOccurenceAddOnProducts
    using:
      manual_configuration:
        remote_table:
          schema: subscription
          name: subscriptionOccurence_addOn
        column_mapping:
          name: productCategory
  - name: subscriptionOccurenceProducts
    using:
      foreign_key_constraint_on:
        column: productCategory
        table:
          schema: subscription
          name: subscriptionOccurence_product
- table:
    schema: master
    name: unit
  configuration:
    custom_root_fields:
      insert: createUnit
      select_aggregate: unitsAggregate
      select_by_pk: unit
      select: units
      delete: deleteUnit
      update: updateUnit
    custom_column_names: {}
  array_relationships:
  - name: bulkItemHistories
    using:
      foreign_key_constraint_on:
        column: unit
        table:
          schema: inventory
          name: bulkItemHistory
  - name: bulkItems
    using:
      foreign_key_constraint_on:
        column: unit
        table:
          schema: inventory
          name: bulkItem
  - name: bulkWorkOrders
    using:
      foreign_key_constraint_on:
        column: inputQuantityUnit
        table:
          schema: inventory
          name: bulkWorkOrder
  - name: ingredientSachets
    using:
      foreign_key_constraint_on:
        column: unit
        table:
          schema: ingredient
          name: ingredientSachet
  - name: inputUnitConversions
    using:
      foreign_key_constraint_on:
        column: inputUnitName
        table:
          schema: master
          name: unitConversion
  - name: outputUnitConversions
    using:
      foreign_key_constraint_on:
        column: outputUnitName
        table:
          schema: master
          name: unitConversion
  - name: purchaseOrderItems
    using:
      foreign_key_constraint_on:
        column: unit
        table:
          schema: inventory
          name: purchaseOrderItem
  - name: sachetItems
    using:
      foreign_key_constraint_on:
        column: unit
        table:
          schema: inventory
          name: sachetItem
  - name: supplierItems
    using:
      foreign_key_constraint_on:
        column: unit
        table:
          schema: inventory
          name: supplierItem
- table:
    schema: master
    name: unitConversion
  configuration:
    custom_root_fields:
      insert: createUnitConversion
      select_aggregate: unitConversionsAggregate
      select_by_pk: unitConversion
      select: unitConversions
      delete: deleteUnitConversion
      update: updateUnitConversion
    custom_column_names: {}
  object_relationships:
  - name: inputUnit
    using:
      foreign_key_constraint_on: outputUnitName
  - name: outputUnit
    using:
      foreign_key_constraint_on: inputUnitName
  array_relationships:
  - name: bulkItem_unitConversions
    using:
      foreign_key_constraint_on:
        column: unitConversionId
        table:
          schema: inventory
          name: bulkItem_unitConversion
  - name: unitConversionByBulkItems
    using:
      foreign_key_constraint_on:
        column: unitConversionId
        table:
          schema: inventory
          name: unitConversionByBulkItem
- table:
    schema: notifications
    name: displayNotification
  configuration:
    custom_root_fields:
      insert: createDisplayNotifications
      select_aggregate: displayNotificationsAggregate
      insert_one: createDisplayNotification
      select_by_pk: displayNotification
      select: displayNotifications
      delete: deleteDisplayNotifications
      update: updateDisplayNotifications
      delete_by_pk: deleteDisplayNotification
      update_by_pk: updateDisplayNotification
    custom_column_names: {}
  object_relationships:
  - name: type
    using:
      foreign_key_constraint_on: typeId
- table:
    schema: notifications
    name: emailConfig
  configuration:
    custom_root_fields:
      insert: createNotificationEmailConfigs
      select_aggregate: notificationEmailConfigsAggregate
      insert_one: createNotificationEmailConfig
      select_by_pk: notificationEmailConfig
      select: notificationEmailConfigs
      delete: deleteNotificationEmailConfigs
      update: updateNotificationEmailConfigs
      delete_by_pk: deleteNotificationEmailConfig
      update_by_pk: updateNotificationEmailConfig
    custom_column_names: {}
  object_relationships:
  - name: type
    using:
      foreign_key_constraint_on: typeId
- table:
    schema: notifications
    name: printConfig
  object_relationships:
  - name: printer
    using:
      foreign_key_constraint_on: printerPrintNodeId
  - name: type
    using:
      foreign_key_constraint_on: typeId
- table:
    schema: notifications
    name: smsConfig
  configuration:
    custom_root_fields:
      insert: createNotificationSmsConfigs
      select_aggregate: notificationSmsConfigsAggregate
      insert_one: createNotificationSmsConfig
      select_by_pk: notificationSmsConfig
      select: notificationSmsConfigs
      delete: deleteNotificationSmsConfigs
      update: updateNotificationSmsConfigs
      delete_by_pk: deleteNotificationSmsConfig
      update_by_pk: updateNotificationSmsConfig
    custom_column_names: {}
  object_relationships:
  - name: type
    using:
      foreign_key_constraint_on: typeId
- table:
    schema: notifications
    name: type
  configuration:
    custom_root_fields:
      insert: createNotificationTypes
      select_aggregate: notificationTypesAggregate
      insert_one: createNotificationType
      select_by_pk: notificationType
      select: notificationTypes
      delete: deleteNotificationTypes
      update: updateNotificationTypes
      delete_by_pk: deleteNotificationType
      update_by_pk: updateNotificationType
    custom_column_names: {}
  array_relationships:
  - name: displayNotifications
    using:
      foreign_key_constraint_on:
        column: typeId
        table:
          schema: notifications
          name: displayNotification
  - name: emailConfigs
    using:
      foreign_key_constraint_on:
        column: typeId
        table:
          schema: notifications
          name: emailConfig
  - name: printConfigs
    using:
      foreign_key_constraint_on:
        column: typeId
        table:
          schema: notifications
          name: printConfig
  - name: smsConfigs
    using:
      foreign_key_constraint_on:
        column: typeId
        table:
          schema: notifications
          name: smsConfig
  event_triggers:
  - name: createNotificationTrigger
    definition:
      enable_manual: false
      update:
        columns:
        - isActive
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/webhook/notification/trigger'
- table:
    schema: onDemand
    name: brand_collection
  configuration:
    custom_root_fields:
      insert: createBrandCollections
      select_aggregate: brandCollectionsAggregate
      insert_one: createBrandCollection
      select_by_pk: brandCollection
      select: brandCollections
      delete: deleteBrandCollections
      update: updateBrandCollections
      delete_by_pk: deleteBrandCollection
      update_by_pk: updateBrandCollection
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  - name: collection
    using:
      foreign_key_constraint_on: collectionId
- table:
    schema: onDemand
    name: category
- table:
    schema: onDemand
    name: collection
  configuration:
    custom_root_fields:
      insert: createCollections
      select_aggregate: collectionsAggregate
      insert_one: createCollection
      select_by_pk: collection
      select: collections
      delete: deleteCollections
      update: updateCollections
      delete_by_pk: deleteCollection
      update_by_pk: updateCollection
    custom_column_names: {}
  object_relationships:
  - name: details
    using:
      manual_configuration:
        remote_table:
          schema: onDemand
          name: collectionDetails
        column_mapping:
          id: id
  array_relationships:
  - name: brands
    using:
      foreign_key_constraint_on:
        column: collectionId
        table:
          schema: onDemand
          name: brand_collection
  - name: productCategories
    using:
      foreign_key_constraint_on:
        column: collectionId
        table:
          schema: onDemand
          name: collection_productCategory
- table:
    schema: onDemand
    name: collectionDetails
  object_relationships:
  - name: collection
    using:
      manual_configuration:
        remote_table:
          schema: onDemand
          name: collection
        column_mapping:
          id: id
- table:
    schema: onDemand
    name: collection_productCategory
  configuration:
    custom_root_fields:
      insert: createCollectionProductCategories
      select_aggregate: collectionProductCategoriesAggregate
      insert_one: createCollectionProductCategory
      select_by_pk: collectionProductCategory
      select: collectionProductCategories
      delete: deleteCollectionProductCategories
      update: updateCollectionProductCategories
      delete_by_pk: deleteCollectionProductCategory
      update_by_pk: updateCollectionProductCategory
    custom_column_names: {}
  object_relationships:
  - name: collection
    using:
      foreign_key_constraint_on: collectionId
  - name: productCategory
    using:
      foreign_key_constraint_on: productCategoryName
  array_relationships:
  - name: products
    using:
      foreign_key_constraint_on:
        column: collection_productCategoryId
        table:
          schema: onDemand
          name: collection_productCategory_product
- table:
    schema: onDemand
    name: collection_productCategory_product
  configuration:
    custom_root_fields:
      insert: createCollectionProductCategoryProducts
      select_aggregate: collectionProductCategoryProductsAggregate
      insert_one: createCollectionProductCategoryProduct
      select_by_pk: collectionProductCategoryProduct
      select: collectionProductCategoryProducts
      delete: deleteCollectionProductCategoryProducts
      update: updateCollectionProductCategoryProducts
      delete_by_pk: deleteCollectionProductCategoryProduct
      update_by_pk: updateCollectionProductCategoryProduct
    custom_column_names: {}
  object_relationships:
  - name: collection_productCategory
    using:
      foreign_key_constraint_on: collection_productCategoryId
  - name: product
    using:
      foreign_key_constraint_on: productId
- table:
    schema: onDemand
    name: menu
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - data
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - id
      - data
      filter: {}
      allow_aggregations: true
- table:
    schema: onDemand
    name: modifier
  configuration:
    custom_root_fields:
      insert: createModifiers
      select_aggregate: modifiersAggregate
      insert_one: createModifier
      select_by_pk: modifier
      select: modifiers
      delete: deleteModifiers
      update: updateModifiers
      delete_by_pk: deleteModifier
      update_by_pk: updateModifier
    custom_column_names: {}
  array_relationships:
  - name: categories
    using:
      foreign_key_constraint_on:
        column: modifierTemplateId
        table:
          schema: onDemand
          name: modifierCategory
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - name
      - importHistoryId
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - id
      - importHistoryId
      - name
      filter: {}
      allow_aggregations: true
- table:
    schema: onDemand
    name: modifierCategory
  configuration:
    custom_root_fields:
      insert: createModifierCategories
      select_aggregate: modifierCategoriesAggregate
      insert_one: createModifierCategory
      select_by_pk: modifierCategory
      select: modifierCategories
      delete: deleteModifierCategories
      update: updateModifierCategories
      delete_by_pk: deleteModifierCategory
      update_by_pk: updateModifierCategory
    custom_column_names: {}
  object_relationships:
  - name: modifierTemplate
    using:
      foreign_key_constraint_on: modifierTemplateId
  array_relationships:
  - name: options
    using:
      foreign_key_constraint_on:
        column: modifierCategoryId
        table:
          schema: onDemand
          name: modifierCategoryOption
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - name
      - type
      - isVisible
      - isRequired
      - limits
      - modifierTemplateId
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isRequired
      - isVisible
      - id
      - modifierTemplateId
      - limits
      - name
      - type
      filter: {}
      allow_aggregations: true
- table:
    schema: onDemand
    name: modifierCategoryOption
  configuration:
    custom_root_fields:
      insert: createModifierOptions
      select_aggregate: modifierOptionsAggregate
      insert_one: createModifierOption
      select_by_pk: modifierOption
      select: modifierOptions
      delete: deleteModifierOptions
      update: updateModifierOptions
      delete_by_pk: deleteModifierOption
      update_by_pk: updateModifierOption
    custom_column_names: {}
  object_relationships:
  - name: ingredientSachet
    using:
      foreign_key_constraint_on: ingredientSachetId
  - name: modifierCategory
    using:
      foreign_key_constraint_on: modifierCategoryId
  - name: operationConfig
    using:
      foreign_key_constraint_on: operationConfigId
  - name: sachetItem
    using:
      foreign_key_constraint_on: sachetItemId
  computed_fields:
  - name: cartItem
    definition:
      function:
        schema: onDemand
        name: modifierCategoryOptionCartItem
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - name
      - originalName
      - price
      - discount
      - quantity
      - image
      - isActive
      - isVisible
      - operationConfigId
      - modifierCategoryId
      - sachetItemId
      - ingredientSachetId
      - simpleRecipeYieldId
      - created_at
      - updated_at
      computed_fields:
      - cartItem
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - isActive
      - isVisible
      - id
      - ingredientSachetId
      - modifierCategoryId
      - operationConfigId
      - quantity
      - sachetItemId
      - simpleRecipeYieldId
      - discount
      - price
      - image
      - name
      - originalName
      - created_at
      - updated_at
      computed_fields:
      - cartItem
      filter: {}
- table:
    schema: onDemand
    name: modifierCategoryOptionView
- table:
    schema: onDemand
    name: storeData
- table:
    schema: order
    name: cart
  configuration:
    custom_root_fields:
      insert: createCarts
      select_aggregate: cartsAggregate
      insert_one: createCart
      select_by_pk: cart
      select: carts
      delete: deleteCarts
      update: updateCarts
      delete_by_pk: deleteCart
      update_by_pk: updateCart
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      manual_configuration:
        remote_table:
          schema: brands
          name: brand
        column_mapping:
          brandId: id
  - name: order
    using:
      foreign_key_constraint_on: orderId
  - name: orderStatus
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: orderStatusEnum
        column_mapping:
          status: value
  - name: subscriptionOccurence
    using:
      manual_configuration:
        remote_table:
          schema: subscription
          name: subscriptionOccurence
        column_mapping:
          subscriptionOccurenceId: id
  - name: subscriptionOccurenceCustomer
    using:
      manual_configuration:
        remote_table:
          schema: subscription
          name: subscriptionOccurence_customer
        column_mapping:
          id: cartId
  array_relationships:
  - name: cartItems
    using:
      foreign_key_constraint_on:
        column: cartId
        table:
          schema: order
          name: cartItem
  - name: cartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: cartId
  - name: loyaltyPointTransactions
    using:
      foreign_key_constraint_on:
        column: orderCartId
        table:
          schema: crm
          name: loyaltyPointTransaction
  - name: paymentHistories
    using:
      foreign_key_constraint_on:
        column: cartId
        table:
          schema: order
          name: stripePaymentHistory
  computed_fields:
  - name: addOnTotal
    definition:
      function:
        schema: order
        name: addOnTotal
    comment: ""
  - name: itemTotal
    definition:
      function:
        schema: order
        name: itemTotal
    comment: ""
  - name: subTotal
    definition:
      function:
        schema: order
        name: subTotal
    comment: ""
  - name: billingDetails
    definition:
      function:
        schema: order
        name: cartBillingDetails
    comment: ""
  - name: totalPrice
    definition:
      function:
        schema: order
        name: totalPrice
    comment: ""
  - name: tax
    definition:
      function:
        schema: order
        name: tax
    comment: ""
  - name: taxPercent
    definition:
      function:
        schema: order
        name: taxPercent
    comment: ""
  - name: deliveryPrice
    definition:
      function:
        schema: order
        name: deliveryPrice
    comment: ""
  - name: discount
    definition:
      function:
        schema: order
        name: discount
    comment: ""
  - name: isCartValid
    definition:
      function:
        schema: order
        name: isCartValid
    comment: ""
  - name: walletAmountUsable
    definition:
      function:
        schema: order
        name: walletAmountUsable
    comment: ""
  - name: loyaltyPointsUsable
    definition:
      function:
        schema: order
        name: loyaltyPointsUsable
    comment: ""
  remote_relationships:
  - definition:
      remote_field:
        paymentHub_payment:
          arguments:
            where:
              customerKeycloakId:
                _eq: $customerKeycloakId
      hasura_fields:
      - customerKeycloakId
      remote_schema: dailycloak
    name: attemptedPayments
  - definition:
      remote_field:
        paymentHub_payment_by_pk:
          arguments:
            id: $paymentId
      hasura_fields:
      - paymentId
      remote_schema: dailycloak
    name: payment
  - definition:
      remote_field:
        platform_stripePaymentMethod:
          arguments:
            stripePaymentMethodId: $paymentMethodId
      hasura_fields:
      - paymentMethodId
      remote_schema: dailykey
    name: paymentCart
  insert_permissions:
  - role: consumer
    permission:
      check: {}
      set:
        brandId: x-hasura-Brand-Id
        customerKeycloakId: x-hasura-Keycloak-Id
        source: x-hasura-Source
      columns:
      - address
      - brandId
      - couponDiscount
      - customerId
      - customerInfo
      - customerKeycloakId
      - fulfillmentInfo
      - isTest
      - loyaltyPointsUsed
      - orderId
      - paidPrice
      - paymentId
      - paymentMethodId
      - paymentRequestInfo
      - paymentStatus
      - status
      - stripeCustomerId
      - subscriptionOccurenceId
      - tip
      - transactionId
      - walletAmountUsed
      backend_only: false
  - role: guest-consumer
    permission:
      check: {}
      set:
        brandId: x-hasura-Brand-Id
        source: x-hasura-Source
      columns:
      - address
      - brandId
      - couponDiscount
      - customerInfo
      - fulfillmentInfo
      - isTest
      - loyaltyPointsUsed
      - paidPrice
      - paymentId
      - paymentMethodId
      - paymentRequestInfo
      - paymentStatus
      - status
      - stripeCustomerId
      - subscriptionOccurenceId
      - tip
      - transactionId
      - walletAmountUsed
      backend_only: false
  select_permissions:
  - role: consumer
    permission:
      columns:
      - isTest
      - brandId
      - customerId
      - id
      - loyaltyPointsUsed
      - orderId
      - subscriptionOccurenceId
      - address
      - customerInfo
      - fulfillmentInfo
      - paymentRequestInfo
      - amount
      - couponDiscount
      - paidPrice
      - tip
      - walletAmountUsed
      - customerKeycloakId
      - paymentMethodId
      - paymentStatus
      - source
      - status
      - stripeCustomerId
      - transactionId
      - created_at
      - paymentUpdatedAt
      - updated_at
      - paymentId
      computed_fields:
      - addOnTotal
      - billingDetails
      - deliveryPrice
      - discount
      - isCartValid
      - itemTotal
      - loyaltyPointsUsable
      - subTotal
      - tax
      - taxPercent
      - totalPrice
      - walletAmountUsable
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - address
      - amount
      - brandId
      - couponDiscount
      - created_at
      - customerId
      - customerInfo
      - customerKeycloakId
      - fulfillmentInfo
      - id
      - isTest
      - loyaltyPointsUsed
      - orderId
      - paidPrice
      - paymentId
      - paymentMethodId
      - paymentRequestInfo
      - paymentStatus
      - paymentUpdatedAt
      - source
      - status
      - stripeCustomerId
      - subscriptionOccurenceId
      - tip
      - transactionId
      - updated_at
      - walletAmountUsed
      computed_fields:
      - addOnTotal
      - billingDetails
      - deliveryPrice
      - discount
      - isCartValid
      - itemTotal
      - loyaltyPointsUsable
      - subTotal
      - tax
      - taxPercent
      - totalPrice
      - walletAmountUsable
      filter: {}
      allow_aggregations: true
  update_permissions:
  - role: consumer
    permission:
      columns:
      - address
      - amount
      - couponDiscount
      - customerId
      - customerInfo
      - customerKeycloakId
      - fulfillmentInfo
      - id
      - isTest
      - loyaltyPointsUsed
      - paidPrice
      - paymentId
      - paymentMethodId
      - stripeCustomerId
      - subscriptionOccurenceId
      - tip
      - walletAmountUsed
      filter: {}
      check: null
      set:
        customerKeycloakId: x-hasura-Keycloak-Id
  delete_permissions:
  - role: consumer
    permission:
      filter: {}
  event_triggers:
  - name: initiatePayment
    definition:
      enable_manual: true
      update:
        columns:
        - paymentRetryAttempt
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/initiate-payment'
  - name: printKOT
    definition:
      enable_manual: true
      update:
        columns:
        - status
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/event/print-kot'
  - name: sendEmailOnOrderCartStatusChange
    definition:
      enable_manual: false
      update:
        columns:
        - paymentStatus
        - status
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/api/order/statuss'
- table:
    schema: order
    name: cartItem
  configuration:
    custom_root_fields:
      insert: createCartItems
      select_aggregate: cartItemsAggregate
      insert_one: createCartItem
      select_by_pk: cartItem
      select: cartItems
      delete: deleteCartItems
      update: updateCartItems
      delete_by_pk: deleteCartItem
      update_by_pk: updateCartItem
    custom_column_names: {}
  object_relationships:
  - name: cart
    using:
      foreign_key_constraint_on: cartId
  - name: cartItemView
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: id
  - name: comboProductComponent
    using:
      foreign_key_constraint_on: comboProductComponentId
  - name: customizableProductComponent
    using:
      foreign_key_constraint_on: customizableProductComponentId
  - name: ingredientSachet
    using:
      foreign_key_constraint_on: ingredientSachetId
  - name: labelTemplate
    using:
      foreign_key_constraint_on: labelTemplateId
  - name: parent
    using:
      foreign_key_constraint_on: parentCartItemId
  - name: product
    using:
      foreign_key_constraint_on: productId
  - name: productOption
    using:
      foreign_key_constraint_on: productOptionId
  - name: sachetItem
    using:
      foreign_key_constraint_on: sachetItemId
  - name: simpleRecipeYield
    using:
      foreign_key_constraint_on: simpleRecipeYieldId
  - name: subscriptionOccurenceProduct
    using:
      foreign_key_constraint_on: subscriptionOccurenceProductId
  array_relationships:
  - name: childs
    using:
      foreign_key_constraint_on:
        column: parentCartItemId
        table:
          schema: order
          name: cartItem
  - name: products
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          productId: productId
  insert_permissions:
  - role: guest-consumer
    permission:
      check: {}
      set:
        cartId: x-hasura-Cart-Id
      columns:
      - accuracy
      - addOnLabel
      - addOnPrice
      - comboProductComponentId
      - customizableProductComponentId
      - ingredientSachetId
      - instructionCardTemplateId
      - inventoryProductBundleId
      - isAddOn
      - isAutoAdded
      - isModifier
      - labelTemplateId
      - modifierOptionId
      - packagingId
      - parentCartItemId
      - position
      - productId
      - productOptionId
      - refundPrice
      - sachetItemId
      - simpleRecipeYieldId
      - stationId
      - status
      - subRecipeYieldId
      - subscriptionOccurenceAddOnProductId
      - subscriptionOccurenceProductId
      - unitPrice
      backend_only: false
  select_permissions:
  - role: guest-consumer
    permission:
      columns:
      - accuracy
      - addOnLabel
      - addOnPrice
      - cartId
      - comboProductComponentId
      - created_at
      - customizableProductComponentId
      - id
      - ingredientSachetId
      - instructionCardTemplateId
      - inventoryProductBundleId
      - isAddOn
      - isAssembled
      - isAutoAdded
      - isModifier
      - labelTemplateId
      - modifierOptionId
      - packagingId
      - parentCartItemId
      - position
      - productId
      - productOptionId
      - refundPrice
      - sachetItemId
      - simpleRecipeYieldId
      - stationId
      - status
      - subRecipeYieldId
      - subscriptionOccurenceAddOnProductId
      - subscriptionOccurenceProductId
      - unitPrice
      - updated_at
      filter: {}
      allow_aggregations: true
  update_permissions:
  - role: consumer
    permission:
      columns:
      - accuracy
      - addOnLabel
      - addOnPrice
      - cartId
      - comboProductComponentId
      - created_at
      - customizableProductComponentId
      - id
      - ingredientSachetId
      - instructionCardTemplateId
      - inventoryProductBundleId
      - isAddOn
      - isAutoAdded
      - isModifier
      - labelTemplateId
      - modifierOptionId
      - packagingId
      - parentCartItemId
      - position
      - productId
      - productOptionId
      - refundPrice
      - sachetItemId
      - simpleRecipeYieldId
      - stationId
      - status
      - subRecipeYieldId
      - subscriptionOccurenceAddOnProductId
      - subscriptionOccurenceProductId
      - unitPrice
      - updated_at
      filter: {}
      check: null
  - role: guest-consumer
    permission:
      columns:
      - accuracy
      - addOnLabel
      - addOnPrice
      - comboProductComponentId
      - customizableProductComponentId
      - ingredientSachetId
      - instructionCardTemplateId
      - inventoryProductBundleId
      - isAddOn
      - isAutoAdded
      - isModifier
      - labelTemplateId
      - modifierOptionId
      - packagingId
      - parentCartItemId
      - position
      - productId
      - productOptionId
      - refundPrice
      - sachetItemId
      - simpleRecipeYieldId
      - stationId
      - status
      - subRecipeYieldId
      - subscriptionOccurenceAddOnProductId
      - subscriptionOccurenceProductId
      - unitPrice
      filter:
        cartId:
          _eq: X-Hasura-Cart-Id
      check: null
  delete_permissions:
  - role: consumer
    permission:
      filter:
        cartId:
          _eq: X-Hasura-Cart-Id
  - role: guest-consumer
    permission:
      filter:
        cartId:
          _eq: X-Hasura-Cart-Id
  event_triggers:
  - name: printLabel
    definition:
      enable_manual: true
      update:
        columns:
        - status
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/event/print-label'
- table:
    schema: order
    name: cartItemView
  object_relationships:
  - name: bulkItem
    using:
      manual_configuration:
        remote_table:
          schema: inventory
          name: bulkItemView
        column_mapping:
          bulkItemId: id
  - name: cart
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cart
        column_mapping:
          cartId: id
  - name: operationConfig
    using:
      manual_configuration:
        remote_table:
          schema: settings
          name: operationConfig
        column_mapping:
          operationConfigId: id
  - name: parent
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          parentCartItemId: id
  - name: product
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: product
        column_mapping:
          productId: id
  - name: productOption
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: productOption
        column_mapping:
          productOptionId: id
  - name: supplierItem
    using:
      manual_configuration:
        remote_table:
          schema: inventory
          name: supplierItemView
        column_mapping:
          supplierItemId: id
  array_relationships:
  - name: childs
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: parentCartItemId
  select_permissions:
  - role: consumer
    permission:
      columns:
      - accuracy
      - addOnLabel
      - addOnPrice
      - bulkItemId
      - cartId
      - cartItemType
      - comboProductComponentId
      - count
      - created_at
      - customizableProductComponentId
      - displayBulkDensity
      - displayImage
      - displayName
      - displayServing
      - displayUnit
      - displayUnitQuantity
      - id
      - ingredientId
      - ingredientProcessingId
      - ingredientSachetId
      - instructionCardTemplateId
      - inventoryProductBundleId
      - isAddOn
      - isAssembled
      - isAutoAdded
      - isModifier
      - labelTemplateId
      - level
      - levelType
      - modifierOptionId
      - operationConfigId
      - orderMode
      - packagingId
      - parentCartItemId
      - path
      - position
      - processingName
      - productId
      - productOptionId
      - productOptionType
      - refundPrice
      - rootCartItemId
      - sachetItemId
      - simpleRecipeYieldId
      - stationId
      - status
      - subRecipeYieldId
      - subscriptionOccurenceAddOnProductId
      - subscriptionOccurenceProductId
      - supplierItemId
      - unitPrice
      - updated_at
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - accuracy
      - addOnLabel
      - addOnPrice
      - bulkItemId
      - cartId
      - cartItemType
      - comboProductComponentId
      - count
      - created_at
      - customizableProductComponentId
      - displayBulkDensity
      - displayImage
      - displayName
      - displayServing
      - displayUnit
      - displayUnitQuantity
      - id
      - ingredientId
      - ingredientProcessingId
      - ingredientSachetId
      - instructionCardTemplateId
      - inventoryProductBundleId
      - isAddOn
      - isAssembled
      - isAutoAdded
      - isModifier
      - labelTemplateId
      - level
      - levelType
      - modifierOptionId
      - operationConfigId
      - orderMode
      - packagingId
      - parentCartItemId
      - path
      - position
      - processingName
      - productId
      - productOptionId
      - productOptionType
      - refundPrice
      - rootCartItemId
      - sachetItemId
      - simpleRecipeYieldId
      - stationId
      - status
      - subRecipeYieldId
      - subscriptionOccurenceAddOnProductId
      - subscriptionOccurenceProductId
      - supplierItemId
      - unitPrice
      - updated_at
      filter:
        cartId:
          _eq: X-Hasura-Cart-Id
      allow_aggregations: true
- table:
    schema: order
    name: cart_rewards
  configuration:
    custom_root_fields:
      insert: createCartRewards
      select_aggregate: cartRewardsAggregate
      insert_one: createCartReward
      select_by_pk: cartReward
      select: cartRewards
      delete: deleteCartRewards
      update: updateCartRewards
      delete_by_pk: deleteCartReward
      update_by_pk: updateCartReward
    custom_column_names: {}
  object_relationships:
  - name: cart
    using:
      foreign_key_constraint_on: cartId
  - name: reward
    using:
      foreign_key_constraint_on: rewardId
- table:
    schema: order
    name: order
  configuration:
    custom_root_fields:
      insert: createOrders
      select_aggregate: ordersAggregate
      insert_one: createOrder
      select_by_pk: order
      select: orders
      delete: deleteOrders
      update: updateOrders
      delete_by_pk: deleteOrder
      update_by_pk: updateOrder
    custom_column_names: {}
  object_relationships:
  - name: brand
    using:
      manual_configuration:
        remote_table:
          schema: brands
          name: brand
        column_mapping:
          brandId: id
  - name: cart
    using:
      foreign_key_constraint_on: cartId
  - name: customer
    using:
      manual_configuration:
        remote_table:
          schema: crm
          name: customer
        column_mapping:
          keycloakId: keycloakId
  - name: deliveryService
    using:
      foreign_key_constraint_on: deliveryPartnershipId
  - name: orderDate
    using:
      manual_configuration:
        remote_table:
          schema: insights
          name: date
        column_mapping:
          created_at: date
  - name: thirdPartyOrder
    using:
      foreign_key_constraint_on: thirdPartyOrderId
  array_relationships:
  - name: rewardHistories
    using:
      foreign_key_constraint_on:
        column: orderId
        table:
          schema: crm
          name: rewardHistory
  computed_fields:
  - name: summary
    definition:
      function:
        schema: order
        name: ordersummary
    comment: ""
  event_triggers:
  - name: createDelivery
    definition:
      enable_manual: true
      update:
        columns:
        - deliveryPartnershipId
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook_from_env: WEBHOOK_CREATE_DELIVERY
    headers:
    - name: OrganizationId
      value_from_env: HEADER_REMOTE_SCHEMA_ORGANIZATIONID
  - name: Order_Created
    definition:
      enable_manual: false
      insert:
        columns: '*'
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/webhook/notification/manage'
- table:
    schema: order
    name: orderMode
  array_relationships:
  - name: productOptionTypes
    using:
      foreign_key_constraint_on:
        column: orderMode
        table:
          schema: products
          name: productOptionType
- table:
    schema: order
    name: orderStatusEnum
  array_relationships:
  - name: carts
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cart
        column_mapping:
          value: status
- table:
    schema: order
    name: ordersAggregate
- table:
    schema: order
    name: stripePaymentHistory
- table:
    schema: order
    name: thirdPartyOrder
  object_relationships:
  - name: order
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: order
        column_mapping:
          id: thirdPartyOrderId
  remote_relationships:
  - definition:
      remote_field:
        marketPlaceHub_marketPlaceCompany_by_pk:
          arguments:
            title: $source
      hasura_fields:
      - source
      remote_schema: dailycloak
    name: thirdPartyCompany
  event_triggers:
  - name: handleThirdPartyOrders
    definition:
      enable_manual: true
      insert:
        columns: '*'
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: https://08e085bb8270.ngrok.io/event/order/third-party
- table:
    schema: packaging
    name: packaging
  configuration:
    custom_root_fields:
      insert: createPackaging
      select_aggregate: packagingAggregate
      select_by_pk: packaging
      select: packagings
      delete: deletePackaging
      update: updatePackaging
    custom_column_names: {}
  object_relationships:
  - name: packagingSpecification
    using:
      foreign_key_constraint_on: packagingSpecificationsId
  - name: supplier
    using:
      foreign_key_constraint_on: supplierId
  array_relationships:
  - name: purchaseOrderItems
    using:
      foreign_key_constraint_on:
        column: packagingId
        table:
          schema: inventory
          name: purchaseOrderItem
  - name: sachetWorkOrders
    using:
      foreign_key_constraint_on:
        column: packagingId
        table:
          schema: inventory
          name: sachetWorkOrder
  remote_relationships:
  - definition:
      remote_field:
        packagingHub_packaging_by_pk:
          arguments:
            id: $mandiPackagingId
      hasura_fields:
      - mandiPackagingId
      remote_schema: dailycloak
    name: mandiPackaging
- table:
    schema: packaging
    name: packagingSpecifications
- table:
    schema: products
    name: comboComponentOptions
  object_relationships:
  - name: linkedProduct
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: product
        column_mapping:
          linkedProductId: id
  - name: productOption
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: productOption
        column_mapping:
          productOptionId: id
  computed_fields:
  - name: cartItem
    definition:
      function:
        schema: products
        name: comboProductComponentOptionCartItem
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - comboComponentId
      - linkedProductId
      - productOptionId
      - price
      - discount
      - productId
      computed_fields:
      - cartItem
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - comboComponentId
      - linkedProductId
      - productId
      - productOptionId
      - discount
      - price
      computed_fields:
      - cartItem
      filter: {}
      allow_aggregations: true
- table:
    schema: products
    name: comboProductComponent
  configuration:
    custom_root_fields:
      insert: createComboProductComponents
      select_aggregate: comboProductComponentsAggregate
      insert_one: createComboProductComponent
      select_by_pk: comboProductComponent
      select: comboProductComponents
      delete: deleteComboProductComponents
      update: updateComboProductComponents
      delete_by_pk: deleteComboProductComponent
      update_by_pk: updateComboProductComponent
    custom_column_names: {}
  object_relationships:
  - name: linkedProduct
    using:
      foreign_key_constraint_on: linkedProductId
  - name: product
    using:
      foreign_key_constraint_on: productId
  array_relationships:
  - name: selectedOptions
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: comboComponentOptions
        column_mapping:
          id: comboComponentId
  computed_fields:
  - name: fullName
    definition:
      function:
        schema: products
        name: comboProductComponentFullName
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - label
      - created_at
      - updated_at
      - isArchived
      - options
      - position
      - productId
      - linkedProductId
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isArchived
      - id
      - linkedProductId
      - productId
      - options
      - position
      - label
      - created_at
      - updated_at
      filter: {}
      allow_aggregations: true
- table:
    schema: products
    name: customizableComponentOptions
  object_relationships:
  - name: linkedProduct
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: product
        column_mapping:
          linkedProductId: id
  - name: productOption
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: productOption
        column_mapping:
          productOptionId: id
  computed_fields:
  - name: comboCartItem
    definition:
      function:
        schema: products
        name: comboProductComponentCustomizableCartItem
    comment: ""
  - name: cartItem
    definition:
      function:
        schema: products
        name: customizableProductComponentOptionCartItem
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - customizableComponentId
      - linkedProductId
      - productOptionId
      - price
      - discount
      - productId
      computed_fields:
      - cartItem
      - comboCartItem
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - customizableComponentId
      - linkedProductId
      - productId
      - productOptionId
      - discount
      - price
      computed_fields:
      - cartItem
      - comboCartItem
      filter: {}
      allow_aggregations: true
- table:
    schema: products
    name: customizableProductComponent
  configuration:
    custom_root_fields:
      insert: createCustomizableProductComponents
      select_aggregate: customizableProductComponentsAggregate
      insert_one: createCustomizableProductComponent
      select_by_pk: customizableProductComponent
      select: customizableProductComponents
      delete: deleteCustomizableProductComponents
      update: updateCustomizableProductComponents
      delete_by_pk: deleteCustomizableProductComponent
      update_by_pk: updateCustomizableProductComponent
    custom_column_names: {}
  object_relationships:
  - name: linkedProduct
    using:
      foreign_key_constraint_on: linkedProductId
  - name: product
    using:
      foreign_key_constraint_on: productId
  array_relationships:
  - name: selectedOptions
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: customizableComponentOptions
        column_mapping:
          id: customizableComponentId
  computed_fields:
  - name: fullName
    definition:
      function:
        schema: products
        name: customizableProductComponentFullName
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - created_at
      - updated_at
      - isArchived
      - options
      - position
      - productId
      - linkedProductId
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isArchived
      - id
      - linkedProductId
      - productId
      - options
      - position
      - created_at
      - updated_at
      filter: {}
      allow_aggregations: true
- table:
    schema: products
    name: inventoryProductBundle
- table:
    schema: products
    name: inventoryProductBundleSachet
- table:
    schema: products
    name: product
  configuration:
    custom_root_fields:
      insert: createProducts
      select_aggregate: productsAggregate
      insert_one: createProduct
      select_by_pk: product
      select: products
      delete: deleteProducts
      update: updateProducts
      delete_by_pk: deleteProduct
      update_by_pk: updateProduct
    custom_column_names: {}
  array_relationships:
  - name: cartItems
    using:
      foreign_key_constraint_on:
        column: productId
        table:
          schema: order
          name: cartItem
  - name: comboProductComponents
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: comboProductComponent
        column_mapping:
          id: productId
  - name: customizableProductComponents
    using:
      foreign_key_constraint_on:
        column: productId
        table:
          schema: products
          name: customizableProductComponent
  - name: productOptions
    using:
      foreign_key_constraint_on:
        column: productId
        table:
          schema: products
          name: productOption
  computed_fields:
  - name: isValid
    definition:
      function:
        schema: products
        name: isProductValid
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - name
      - additionalText
      - description
      - assets
      - isPublished
      - isPopupAllowed
      - defaultProductOptionId
      - created_at
      - updated_at
      - tags
      - isArchived
      - type
      - price
      - discount
      - importHistoryId
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isArchived
      - isPopupAllowed
      - isPublished
      - defaultProductOptionId
      - id
      - importHistoryId
      - assets
      - tags
      - discount
      - price
      - additionalText
      - description
      - name
      - type
      - created_at
      - updated_at
      filter: {}
      allow_aggregations: true
- table:
    schema: products
    name: productOption
  configuration:
    custom_root_fields:
      insert: createProductOptions
      select_aggregate: productOptionsAggregate
      insert_one: createProductOption
      select_by_pk: productOption
      select: productOptions
      delete: deleteProductOptions
      update: updateProductOptions
      delete_by_pk: deleteProductOption
      update_by_pk: updateProductOption
    custom_column_names: {}
  object_relationships:
  - name: modifier
    using:
      foreign_key_constraint_on: modifierId
  - name: operationConfig
    using:
      foreign_key_constraint_on: operationConfigId
  - name: product
    using:
      foreign_key_constraint_on: productId
  - name: productOptionType
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: productOptionType
        column_mapping:
          type: title
  - name: sachetItem
    using:
      foreign_key_constraint_on: sachetItemId
  - name: simpleRecipeYield
    using:
      foreign_key_constraint_on: simpleRecipeYieldId
  - name: supplierItem
    using:
      foreign_key_constraint_on: supplierItemId
  computed_fields:
  - name: cartItem
    definition:
      function:
        schema: products
        name: productOptionCartItem
    comment: ""
  - name: fullName
    definition:
      function:
        schema: products
        name: productOptionFullName
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - productId
      - label
      - modifierId
      - operationConfigId
      - simpleRecipeYieldId
      - supplierItemId
      - sachetItemId
      - position
      - created_at
      - updated_at
      - price
      - discount
      - quantity
      - type
      - isArchived
      - inventoryProductBundleId
      computed_fields:
      - cartItem
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isArchived
      - id
      - inventoryProductBundleId
      - modifierId
      - operationConfigId
      - productId
      - quantity
      - sachetItemId
      - simpleRecipeYieldId
      - supplierItemId
      - discount
      - position
      - price
      - label
      - type
      - created_at
      - updated_at
      computed_fields:
      - cartItem
      filter: {}
      allow_aggregations: true
- table:
    schema: products
    name: productOptionType
  configuration:
    custom_root_fields:
      insert: createProductOptionTypes
      select_aggregate: productOptionTypesAggregate
      insert_one: createProductOptionType
      select_by_pk: productOptionType
      select: productOptionTypes
      delete: deleteProductOptionTypes
      update: updateProductOptionTypes
      delete_by_pk: deleteProductOptionType
      update_by_pk: updateProductOptionType
    custom_column_names: {}
  array_relationships:
  - name: cartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          title: productOptionType
  - name: productOptions
    using:
      manual_configuration:
        remote_table:
          schema: products
          name: productOption
        column_mapping:
          title: type
- table:
    schema: products
    name: productOptionView
  array_relationships:
  - name: cartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: productOptionId
- table:
    schema: products
    name: productType
- table:
    schema: public
    name: response
  select_permissions:
  - role: consumer
    permission:
      columns:
      - success
      - message
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - success
      - message
      filter: {}
- table:
    schema: rules
    name: conditions
  configuration:
    custom_root_fields:
      insert: createConditions
      select_aggregate: conditionsAggregate
      insert_one: createCondition
      select_by_pk: condition
      select: conditions
      delete: deleteConditions
      update: updateConditions
      delete_by_pk: deleteCondition
      update_by_pk: updateCondition
    custom_column_names: {}
  computed_fields:
  - name: isValid
    definition:
      function:
        schema: rules
        name: isConditionValid
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - condition
      - app
      computed_fields:
      - isValid
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - id
      - condition
      - app
      computed_fields:
      - isValid
      filter: {}
- table:
    schema: rules
    name: facts
  configuration:
    custom_root_fields:
      insert: createFacts
      select_aggregate: factsAggregate
      insert_one: createFact
      select_by_pk: fact
      select: facts
      delete: deleteFacts
      update: updateFacts
      delete_by_pk: deleteFact
      update_by_pk: updateFact
    custom_column_names: {}
  computed_fields:
  - name: cartSubscriptionTitle
    definition:
      function:
        schema: rules
        name: cartSubscriptionTitle
    comment: ""
  - name: cartCustomizableProductComponent
    definition:
      function:
        schema: rules
        name: cartCustomizableProductComponent
    comment: ""
  - name: isCartSubscription
    definition:
      function:
        schema: rules
        name: isCartSubscription
    comment: ""
  - name: totalNumberOfCartCustomizableProduct
    definition:
      function:
        schema: rules
        name: totalNumberOfCartCustomizableProduct
    comment: ""
  - name: totalNumberOfCartInventoryProduct
    definition:
      function:
        schema: rules
        name: totalNumberOfCartInventoryProduct
    comment: ""
  - name: customerReferrerCode
    definition:
      function:
        schema: rules
        name: customerReferrerCode
    comment: ""
  - name: totalNumberOfCartComboProduct
    definition:
      function:
        schema: rules
        name: totalNumberOfCartComboProduct
    comment: ""
  - name: cartComboProduct
    definition:
      function:
        schema: rules
        name: cartComboProduct
    comment: ""
  - name: cartInventoryProductOption
    definition:
      function:
        schema: rules
        name: cartInventoryProductOption
    comment: ""
  - name: cartMealKitProductOption
    definition:
      function:
        schema: rules
        name: cartMealKitProductOption
    comment: ""
  - name: cartSimpleProduct
    definition:
      function:
        schema: rules
        name: cartSimpleProduct
    comment: ""
  - name: totalNumberOfCartMealKitProduct
    definition:
      function:
        schema: rules
        name: totalNumberOfCartMealKitProduct
    comment: ""
  - name: customerEmail
    definition:
      function:
        schema: rules
        name: customerEmail
    comment: ""
  - name: orderCountWithinDuration
    definition:
      function:
        schema: rules
        name: orderCountWithDuration
    comment: ""
  - name: numberOfSuccessfulCustomerReferred
    definition:
      function:
        schema: rules
        name: numberOfSuccessfulCustomerReferred
    comment: ""
  - name: cartSubscriptionItemCount
    definition:
      function:
        schema: rules
        name: cartSubscriptionItemCount
    comment: ""
  - name: cartSubscriptionServingSize
    definition:
      function:
        schema: rules
        name: cartSubscriptionServingSize
    comment: ""
  - name: cartCustomizableProduct
    definition:
      function:
        schema: rules
        name: cartCustomizableProduct
    comment: ""
  - name: cartComboProductComponent
    definition:
      function:
        schema: rules
        name: cartComboProductComponent
    comment: ""
  - name: cartReadyToEatProductOption
    definition:
      function:
        schema: rules
        name: cartReadyToEatProductOption
    comment: ""
  - name: cartContainsAddOnProducts
    definition:
      function:
        schema: rules
        name: cartContainsAddOnProducts
    comment: ""
  - name: cartItemTotal
    definition:
      function:
        schema: rules
        name: cartItemTotal
    comment: ""
  - name: customerSubscriptionSkipCountWithDuration
    definition:
      function:
        schema: rules
        name: customerSubscriptionSkipCountWithDuration
    comment: ""
  - name: numberOfSubscriptionAddOnProducts
    definition:
      function:
        schema: rules
        name: numberOfSubscriptionAddOnProducts
    comment: ""
  - name: totalNumberOfCartReadyToEatProduct
    definition:
      function:
        schema: rules
        name: totalNumberOfCartReadyToEatProduct
    comment: ""
  - name: referralStatus
    definition:
      function:
        schema: rules
        name: referralStatus
    comment: ""
  - name: isCustomerReferred
    definition:
      function:
        schema: rules
        name: isCustomerReferred
    comment: ""
  - name: numberOfCustomerReferred
    definition:
      function:
        schema: rules
        name: numberOfCustomerReferred
    comment: ""
  - name: customerReferredByCode
    definition:
      function:
        schema: rules
        name: customerReferredByCode
    comment: ""
- table:
    schema: safety
    name: safetyCheck
  array_relationships:
  - name: SafetyCheckPerUsers
    using:
      foreign_key_constraint_on:
        column: SafetyCheckId
        table:
          schema: safety
          name: safetyCheckPerUser
- table:
    schema: safety
    name: safetyCheckPerUser
  object_relationships:
  - name: safetyCheck
    using:
      foreign_key_constraint_on: SafetyCheckId
  - name: user
    using:
      foreign_key_constraint_on: userId
- table:
    schema: settings
    name: app
  configuration:
    custom_root_fields:
      insert: insertApps
      select_aggregate: appsAggregate
      insert_one: insertApp
      select_by_pk: app
      select: apps
      delete: deleteApps
      update: updateApps
      delete_by_pk: deleteApp
      update_by_pk: updateApp
    custom_column_names: {}
  array_relationships:
  - name: permissions
    using:
      foreign_key_constraint_on:
        column: appId
        table:
          schema: settings
          name: appPermission
  - name: roles
    using:
      foreign_key_constraint_on:
        column: appId
        table:
          schema: settings
          name: role_app
- table:
    schema: settings
    name: appPermission
  object_relationships:
  - name: app
    using:
      foreign_key_constraint_on: appId
  array_relationships:
  - name: role_appPermissions
    using:
      foreign_key_constraint_on:
        column: appPermissionId
        table:
          schema: settings
          name: role_appPermission
- table:
    schema: settings
    name: appSettings
- table:
    schema: settings
    name: app_module
- table:
    schema: settings
    name: operationConfig
  object_relationships:
  - name: labelTemplate
    using:
      foreign_key_constraint_on: labelTemplateId
  - name: packaging
    using:
      foreign_key_constraint_on: packagingId
  - name: station
    using:
      foreign_key_constraint_on: stationId
  computed_fields:
  - name: name
    definition:
      function:
        schema: settings
        name: operationConfigName
    comment: ""
- table:
    schema: settings
    name: organizationSettings
- table:
    schema: settings
    name: role
  configuration:
    custom_root_fields:
      insert: insertRoles
      select_aggregate: rolesAggregate
      insert_one: insertRole
      select_by_pk: role
      select: roles
      delete: deleteRoles
      update: updateRoles
      delete_by_pk: deleteRole
      update_by_pk: updateRole
    custom_column_names: {}
  array_relationships:
  - name: apps
    using:
      foreign_key_constraint_on:
        column: roleId
        table:
          schema: settings
          name: role_app
  - name: users
    using:
      foreign_key_constraint_on:
        column: roleId
        table:
          schema: settings
          name: user_role
- table:
    schema: settings
    name: role_app
  object_relationships:
  - name: app
    using:
      foreign_key_constraint_on: appId
  - name: role
    using:
      foreign_key_constraint_on: roleId
  array_relationships:
  - name: permissions
    using:
      foreign_key_constraint_on:
        column: role_appId
        table:
          schema: settings
          name: role_appPermission
- table:
    schema: settings
    name: role_appPermission
  object_relationships:
  - name: permission
    using:
      foreign_key_constraint_on: appPermissionId
  - name: role_app
    using:
      foreign_key_constraint_on: role_appId
- table:
    schema: settings
    name: station
  configuration:
    custom_root_fields:
      insert: insertStations
      select_aggregate: stationsAggregate
      insert_one: insertStation
      select_by_pk: station
      select: stations
      delete: deleteStations
      update: updateStations
      delete_by_pk: deleteStation
      update_by_pk: updateStation
    custom_column_names: {}
  object_relationships:
  - name: defaultKotPrinter
    using:
      foreign_key_constraint_on: defaultKotPrinterId
  - name: defaultLabelPrinter
    using:
      foreign_key_constraint_on: defaultLabelPrinterId
  - name: defaultScale
    using:
      manual_configuration:
        remote_table:
          schema: deviceHub
          name: scale
        column_mapping:
          defaultScaleId: id
  array_relationships:
  - name: assignedScales
    using:
      manual_configuration:
        remote_table:
          schema: deviceHub
          name: scale
        column_mapping:
          id: stationId
  - name: assignedUsers
    using:
      foreign_key_constraint_on:
        column: stationId
        table:
          schema: settings
          name: station_user
  - name: attachedKotPrinters
    using:
      foreign_key_constraint_on:
        column: stationId
        table:
          schema: settings
          name: station_kot_printer
  - name: attachedLabelPrinters
    using:
      foreign_key_constraint_on:
        column: stationId
        table:
          schema: settings
          name: station_label_printer
  - name: bulkWorkOrders
    using:
      foreign_key_constraint_on:
        column: stationId
        table:
          schema: inventory
          name: bulkWorkOrder
  - name: modeOfFulfillments
    using:
      foreign_key_constraint_on:
        column: stationId
        table:
          schema: ingredient
          name: modeOfFulfillment
  - name: sachetWorkOrders
    using:
      foreign_key_constraint_on:
        column: stationId
        table:
          schema: inventory
          name: sachetWorkOrder
- table:
    schema: settings
    name: station_kot_printer
  object_relationships:
  - name: kotPrinter
    using:
      foreign_key_constraint_on: printNodeId
  - name: station
    using:
      foreign_key_constraint_on: stationId
- table:
    schema: settings
    name: station_label_printer
  object_relationships:
  - name: labelPrinter
    using:
      foreign_key_constraint_on: printNodeId
  - name: station
    using:
      foreign_key_constraint_on: stationId
- table:
    schema: settings
    name: station_user
  configuration:
    custom_root_fields:
      insert: createStation_users
      select_aggregate: station_usersAggregate
      insert_one: createStation_user
      select_by_pk: station_users
      select: station_user
      delete: deleteStation_users
      update: updateStation_users
      delete_by_pk: deleteStation_user
      update_by_pk: updateStation_user
    custom_column_names: {}
  object_relationships:
  - name: station
    using:
      foreign_key_constraint_on: stationId
  - name: user
    using:
      foreign_key_constraint_on: userKeycloakId
- table:
    schema: settings
    name: user
  array_relationships:
  - name: assignedStations
    using:
      foreign_key_constraint_on:
        column: userKeycloakId
        table:
          schema: settings
          name: station_user
  - name: bulkWorkOrders
    using:
      foreign_key_constraint_on:
        column: userId
        table:
          schema: inventory
          name: bulkWorkOrder
  - name: roles
    using:
      foreign_key_constraint_on:
        column: userId
        table:
          schema: settings
          name: user_role
  - name: sachetWorkOrders
    using:
      foreign_key_constraint_on:
        column: userId
        table:
          schema: inventory
          name: sachetWorkOrder
  event_triggers:
  - name: manageUser
    definition:
      enable_manual: true
      delete:
        columns: '*'
      update:
        columns:
        - email
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/webhook/user'
- table:
    schema: settings
    name: user_role
  object_relationships:
  - name: role
    using:
      foreign_key_constraint_on: roleId
  - name: user
    using:
      foreign_key_constraint_on: userId
- table:
    schema: simpleRecipe
    name: simpleRecipe
  configuration:
    custom_root_fields:
      insert: createSimpleRecipe
      select_aggregate: simpleRecipesAggregate
      select_by_pk: simpleRecipe
      select: simpleRecipes
      delete: deleteSimpleRecipe
      update: updateSimpleRecipe
    custom_column_names: {}
  object_relationships:
  - name: cuisineNameId
    using:
      foreign_key_constraint_on: cuisine
  array_relationships:
  - name: instructionSets
    using:
      foreign_key_constraint_on:
        column: simpleRecipeId
        table:
          schema: instructions
          name: instructionSet
  - name: simpleRecipeIngredients
    using:
      foreign_key_constraint_on:
        column: simpleRecipeId
        table:
          schema: simpleRecipe
          name: simpleRecipe_ingredient_processing
  - name: simpleRecipeYields
    using:
      foreign_key_constraint_on:
        column: simpleRecipeId
        table:
          schema: simpleRecipe
          name: simpleRecipeYield
  computed_fields:
  - name: isValid
    definition:
      function:
        schema: simpleRecipe
        name: issimplerecipevalid
    comment: ""
  - name: richResult
    definition:
      function:
        schema: simpleRecipe
        name: getRecipeRichResult
    comment: ""
- table:
    schema: simpleRecipe
    name: simpleRecipeComponent_productOptionType
- table:
    schema: simpleRecipe
    name: simpleRecipeYield
  configuration:
    custom_root_fields:
      insert: createSimpleRecipeYield
      select_aggregate: simpleRecipeYieldsAggregate
      select_by_pk: simpleRecipeYield
      select: simpleRecipeYields
      delete: deleteSimpleRecipeYield
      update: updateSimpleRecipeYield
    custom_column_names: {}
  object_relationships:
  - name: simpleRecipe
    using:
      foreign_key_constraint_on: simpleRecipeId
  array_relationships:
  - name: cartItems
    using:
      foreign_key_constraint_on:
        column: simpleRecipeYieldId
        table:
          schema: order
          name: cartItem
  - name: ingredientSachets
    using:
      foreign_key_constraint_on:
        column: recipeYieldId
        table:
          schema: simpleRecipe
          name: simpleRecipeYield_ingredientSachet
  - name: simpleRecipeCartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: simpleRecipeYieldId
  - name: subRecipeCartItemViews
    using:
      manual_configuration:
        remote_table:
          schema: order
          name: cartItemView
        column_mapping:
          id: subRecipeYieldId
  computed_fields:
  - name: nutritionalInfo
    definition:
      function:
        schema: simpleRecipe
        name: yieldNutritionalInfo
    comment: ""
  - name: cost
    definition:
      function:
        schema: simpleRecipe
        name: yieldCost
    comment: ""
  - name: allergens
    definition:
      function:
        schema: simpleRecipe
        name: yieldAllergens
    comment: ""
- table:
    schema: simpleRecipe
    name: simpleRecipeYieldView
- table:
    schema: simpleRecipe
    name: simpleRecipeYield_ingredientSachet
  configuration:
    custom_root_fields:
      insert: createSimpleRecipeSachet
      select_aggregate: simpleRecipeSachetsAggregate
      select_by_pk: simpleRecipeSachet
      select: simpleRecipeSachets
      delete: deleteSimpleRecipeSachet
      update: updateSimpleRecipeSachet
    custom_column_names: {}
  object_relationships:
  - name: ingredientSachet
    using:
      foreign_key_constraint_on: ingredientSachetId
  - name: simpleRecipeIngredientProcessing
    using:
      foreign_key_constraint_on: simpleRecipeIngredientProcessingId
  - name: simpleRecipeYield
    using:
      foreign_key_constraint_on: recipeYieldId
- table:
    schema: simpleRecipe
    name: simpleRecipe_ingredient_processing
  configuration:
    custom_root_fields:
      insert: createSimpleRecipeIngredientProcessings
      select_aggregate: simpleRecipeIngredientProcessingsAggregate
      insert_one: createSimpleRecipeIngredientProcessing
      select_by_pk: simpleRecipeIngredientProcessing
      select: simpleRecipeIngredientProcessings
      delete: deleteSimpleRecipeIngredientProcessings
      update: updateSimpleRecipeIngredientProcessings
      delete_by_pk: deleteSimpleRecipeIngredientProcessing
      update_by_pk: updateSimpleRecipeIngredientProcessing
    custom_column_names: {}
  object_relationships:
  - name: ingredient
    using:
      foreign_key_constraint_on: ingredientId
  - name: ingredientProcessing
    using:
      foreign_key_constraint_on: processingId
  - name: simpleRecipe
    using:
      foreign_key_constraint_on: simpleRecipeId
  array_relationships:
  - name: simpleRecipeYield_ingredientSachets
    using:
      foreign_key_constraint_on:
        column: simpleRecipeIngredientProcessingId
        table:
          schema: simpleRecipe
          name: simpleRecipeYield_ingredientSachet
- table:
    schema: simpleRecipe
    name: simpleRecipe_productOptionType
- table:
    schema: subscription
    name: brand_subscriptionTitle
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  select_permissions:
  - role: consumer
    permission:
      columns:
      - brandId
      - subscriptionTitleId
      - isActive
      - allowAutoSelectOptOut
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - brandId
      - subscriptionTitleId
      - isActive
      - allowAutoSelectOptOut
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: subscription
  object_relationships:
  - name: subscriptionItemCount
    using:
      foreign_key_constraint_on: subscriptionItemCountId
  array_relationships:
  - name: availableZipcodes
    using:
      foreign_key_constraint_on:
        column: subscriptionId
        table:
          schema: subscription
          name: subscription_zipcode
  - name: brand_customers
    using:
      foreign_key_constraint_on:
        column: subscriptionId
        table:
          schema: crm
          name: brand_customer
  - name: customers
    using:
      foreign_key_constraint_on:
        column: subscriptionId
        table:
          schema: crm
          name: customer
  - name: subscriptionAddOnProducts
    using:
      manual_configuration:
        remote_table:
          schema: subscription
          name: subscriptionOccurence_addOn
        column_mapping:
          id: subscriptionId
  - name: subscriptionOccurences
    using:
      foreign_key_constraint_on:
        column: subscriptionId
        table:
          schema: subscription
          name: subscriptionOccurence
  - name: subscriptionOccurenceViews
    using:
      manual_configuration:
        remote_table:
          schema: subscription
          name: subscriptionOccurenceView
        column_mapping:
          id: subscriptionId
  - name: subscriptionProducts
    using:
      foreign_key_constraint_on:
        column: subscriptionId
        table:
          schema: subscription
          name: subscriptionOccurence_product
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - subscriptionItemCountId
      - rrule
      - metaDetails
      - cutOffTime
      - leadTime
      - startTime
      - startDate
      - endDate
      - defaultSubscriptionAutoSelectOption
      - reminderSettings
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - endDate
      - startDate
      - id
      - subscriptionItemCountId
      - leadTime
      - metaDetails
      - reminderSettings
      - startTime
      - defaultSubscriptionAutoSelectOption
      - rrule
      - cutOffTime
      filter: {}
      allow_aggregations: true
  event_triggers:
  - name: createOccurences
    definition:
      enable_manual: true
      insert:
        columns: '*'
      update:
        columns:
        - endDate
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/webhook/occurence/create'
- table:
    schema: subscription
    name: subscriptionAutoSelectOption
  select_permissions:
  - role: consumer
    permission:
      columns:
      - methodName
      - displayName
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - displayName
      - methodName
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: subscriptionItemCount
  object_relationships:
  - name: subscriptionServing
    using:
      foreign_key_constraint_on: subscriptionServingId
  array_relationships:
  - name: subscriptions
    using:
      foreign_key_constraint_on:
        column: subscriptionItemCountId
        table:
          schema: subscription
          name: subscription
  computed_fields:
  - name: isValid
    definition:
      function:
        schema: subscription
        name: isSubscriptionItemCountValid
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - subscriptionServingId
      - count
      - metaDetails
      - price
      - isActive
      - tax
      - isTaxIncluded
      computed_fields:
      - isValid
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isActive
      - isTaxIncluded
      - count
      - id
      - subscriptionServingId
      - metaDetails
      - price
      - tax
      computed_fields:
      - isValid
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: subscriptionOccurence
  configuration:
    custom_root_fields:
      insert: insertSubscriptionOccurences
      select_aggregate: subscriptionOccurencesAggregate
      insert_one: insertSubscriptionOccurence
      select_by_pk: subscriptionOccurence
      select: subscriptionOccurences
      delete: deleteSubscriptionOccurences
      update: updateSubscriptionOccurences
      delete_by_pk: deleteSubscriptionOccurence
      update_by_pk: updateSubscriptionOccurence
    custom_column_names: {}
  object_relationships:
  - name: subscription
    using:
      foreign_key_constraint_on: subscriptionId
  - name: subscriptionOccurenceView
    using:
      manual_configuration:
        remote_table:
          schema: subscription
          name: subscriptionOccurenceView
        column_mapping:
          id: id
  array_relationships:
  - name: addOnProducts
    using:
      manual_configuration:
        remote_table:
          schema: subscription
          name: subscriptionOccurence_addOn
        column_mapping:
          id: subscriptionOccurenceId
  - name: brand_subscriptionOccurences
    using:
      manual_configuration:
        remote_table:
          schema: brands
          name: brand
        column_mapping:
          id: id
  - name: customers
    using:
      foreign_key_constraint_on:
        column: subscriptionOccurenceId
        table:
          schema: subscription
          name: subscriptionOccurence_customer
  - name: products
    using:
      foreign_key_constraint_on:
        column: subscriptionOccurenceId
        table:
          schema: subscription
          name: subscriptionOccurence_product
  computed_fields:
  - name: subscriptionOccurenceWeekRank
    definition:
      function:
        schema: subscription
        name: subscriptionOccurenceWeekRank
    comment: ""
  - name: isValid
    definition:
      function:
        schema: subscription
        name: calculateIsValid
    comment: ""
  - name: isVisible
    definition:
      function:
        schema: subscription
        name: calculateIsVisible
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - fulfillmentDate
      - cutoffTimeStamp
      - subscriptionId
      - startTimeStamp
      - assets
      - subscriptionAutoSelectOption
      computed_fields:
      - isValid
      - isVisible
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - fulfillmentDate
      - id
      - subscriptionId
      - assets
      - subscriptionAutoSelectOption
      - cutoffTimeStamp
      - startTimeStamp
      computed_fields:
      - isValid
      - isVisible
      filter: {}
      allow_aggregations: true
  event_triggers:
  - name: createOccurenceScheduledEvent
    definition:
      enable_manual: true
      insert:
        columns: '*'
      update:
        columns:
        - cutoffTimeStamp
    retry_conf:
      num_retries: 0
      interval_sec: 10
      timeout_sec: 60
    webhook: '{{DAILYOS_SERVER_URL}}/webhook/occurence/schedule/create'
- table:
    schema: subscription
    name: subscriptionOccurenceView
  select_permissions:
  - role: consumer
    permission:
      columns:
      - isValid
      - id
      - isVisible
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isValid
      - isVisible
      - id
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: subscriptionOccurence_addOn
  object_relationships:
  - name: productOption
    using:
      foreign_key_constraint_on: productOptionId
  computed_fields:
  - name: cartItem
    definition:
      function:
        schema: subscription
        name: addOnCartItem
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - subscriptionOccurenceId
      - unitPrice
      - productCategory
      - isAvailable
      - isVisible
      - isSingleSelect
      - subscriptionId
      - productOptionId
      - created_at
      - updated_at
      computed_fields:
      - cartItem
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isAvailable
      - isSingleSelect
      - isVisible
      - id
      - productOptionId
      - subscriptionId
      - subscriptionOccurenceId
      - unitPrice
      - productCategory
      - created_at
      - updated_at
      computed_fields:
      - cartItem
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: subscriptionOccurence_customer
  object_relationships:
  - name: brand_customer
    using:
      foreign_key_constraint_on: brand_customerId
  - name: cart
    using:
      foreign_key_constraint_on: cartId
  - name: customer
    using:
      foreign_key_constraint_on: keycloakId
  - name: subscriptionOccurence
    using:
      foreign_key_constraint_on: subscriptionOccurenceId
  computed_fields:
  - name: validStatus
    definition:
      function:
        schema: subscription
        name: isCartValid
    comment: ""
  insert_permissions:
  - role: consumer
    permission:
      check:
        keycloakId:
          _eq: X-Hasura-Keycloak-Id
      set:
        keycloakId: x-hasura-Keycloak-Id
      columns:
      - subscriptionOccurenceId
      - keycloakId
      - cartId
      - isSkipped
      - isAuto
      - brand_customerId
      backend_only: false
  select_permissions:
  - role: consumer
    permission:
      columns:
      - isAuto
      - isSkipped
      - brand_customerId
      - cartId
      - subscriptionOccurenceId
      - keycloakId
      computed_fields:
      - validStatus
      filter:
        keycloakId:
          _eq: X-Hasura-Keycloak-Id
      allow_aggregations: true
  update_permissions:
  - role: consumer
    permission:
      columns:
      - isAuto
      - isSkipped
      - brand_customerId
      - cartId
      - subscriptionOccurenceId
      - keycloakId
      filter:
        keycloakId:
          _eq: X-Hasura-Keycloak-Id
      check:
        keycloakId:
          _eq: X-Hasura-Keycloak-Id
      set:
        keycloakId: x-hasura-Keycloak-Id
  delete_permissions:
  - role: consumer
    permission:
      filter:
        keycloakId:
          _eq: X-Hasura-Keycloak-Id
- table:
    schema: subscription
    name: subscriptionOccurence_product
  object_relationships:
  - name: productCategoryRef
    using:
      foreign_key_constraint_on: productCategory
  - name: productOption
    using:
      foreign_key_constraint_on: productOptionId
  - name: subscription
    using:
      foreign_key_constraint_on: subscriptionId
  - name: subscriptionOccurence
    using:
      foreign_key_constraint_on: subscriptionOccurenceId
  array_relationships:
  - name: cartItems
    using:
      foreign_key_constraint_on:
        column: subscriptionOccurenceProductId
        table:
          schema: order
          name: cartItem
  computed_fields:
  - name: cartItem
    definition:
      function:
        schema: subscription
        name: cartItem
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - subscriptionOccurenceId
      - addOnPrice
      - addOnLabel
      - productCategory
      - isAvailable
      - isVisible
      - isSingleSelect
      - subscriptionId
      - id
      - created_at
      - updated_at
      - isAutoSelectable
      - productOptionId
      computed_fields:
      - cartItem
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isAutoSelectable
      - isAvailable
      - isSingleSelect
      - isVisible
      - id
      - productOptionId
      - subscriptionId
      - subscriptionOccurenceId
      - addOnPrice
      - addOnLabel
      - productCategory
      - created_at
      - updated_at
      computed_fields:
      - cartItem
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: subscriptionPickupOption
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - time
      - address
      - created_at
      - updated_at
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - id
      - address
      - time
      - created_at
      - updated_at
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: subscriptionServing
  object_relationships:
  - name: defaultSubscriptionItemCount
    using:
      foreign_key_constraint_on: defaultSubscriptionItemCountId
  - name: subscriptionTitle
    using:
      foreign_key_constraint_on: subscriptionTitleId
  array_relationships:
  - name: subscriptionItemCounts
    using:
      foreign_key_constraint_on:
        column: subscriptionServingId
        table:
          schema: subscription
          name: subscriptionItemCount
  computed_fields:
  - name: isValid
    definition:
      function:
        schema: subscription
        name: isSubscriptionServingValid
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - subscriptionTitleId
      - servingSize
      - metaDetails
      - defaultSubscriptionItemCountId
      - isActive
      computed_fields:
      - isValid
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isActive
      - defaultSubscriptionItemCountId
      - id
      - servingSize
      - subscriptionTitleId
      - metaDetails
      computed_fields:
      - isValid
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: subscriptionTitle
  object_relationships:
  - name: defaultSubscriptionServing
    using:
      foreign_key_constraint_on: defaultSubscriptionServingId
  array_relationships:
  - name: brands
    using:
      manual_configuration:
        remote_table:
          schema: subscription
          name: brand_subscriptionTitle
        column_mapping:
          id: subscriptionTitleId
  - name: subscriptionServings
    using:
      foreign_key_constraint_on:
        column: subscriptionTitleId
        table:
          schema: subscription
          name: subscriptionServing
  computed_fields:
  - name: isValid
    definition:
      function:
        schema: subscription
        name: isSubscriptionTitleValid
    comment: ""
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - title
      - metaDetails
      - defaultSubscriptionServingId
      - created_at
      - updated_at
      - isActive
      computed_fields:
      - isValid
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isActive
      - defaultSubscriptionServingId
      - id
      - metaDetails
      - title
      - created_at
      - updated_at
      computed_fields:
      - isValid
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: subscription_zipcode
  object_relationships:
  - name: subscription
    using:
      foreign_key_constraint_on: subscriptionId
  - name: subscriptionPickupOption
    using:
      foreign_key_constraint_on: subscriptionPickupOptionId
  select_permissions:
  - role: consumer
    permission:
      columns:
      - subscriptionId
      - zipcode
      - deliveryPrice
      - isActive
      - deliveryTime
      - subscriptionPickupOptionId
      - isDeliveryActive
      - isPickupActive
      - defaultAutoSelectFulfillmentMode
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isActive
      - isDeliveryActive
      - isPickupActive
      - subscriptionId
      - subscriptionPickupOptionId
      - deliveryTime
      - deliveryPrice
      - defaultAutoSelectFulfillmentMode
      - zipcode
      filter: {}
      allow_aggregations: true
- table:
    schema: subscription
    name: view_brand_customer_subscriptionOccurence
- table:
    schema: subscription
    name: view_subscription
- table:
    schema: subscription
    name: view_subscriptionItemCount
- table:
    schema: subscription
    name: view_subscriptionOccurenceMenuHealth
- table:
    schema: subscription
    name: view_subscriptionOccurence_customer
- table:
    schema: subscription
    name: view_subscriptionServing
- table:
    schema: subscription
    name: view_subscriptionTitle
- table:
    schema: website
    name: navigationMenu
- table:
    schema: website
    name: navigationMenuItem
  object_relationships:
  - name: navigationMenu
    using:
      foreign_key_constraint_on: navigationMenuId
  - name: parentNavigationMenuItem
    using:
      foreign_key_constraint_on: parentNavigationMenuItemId
  array_relationships:
  - name: childNavigationMenuItems
    using:
      foreign_key_constraint_on:
        column: parentNavigationMenuItemId
        table:
          schema: website
          name: navigationMenuItem
- table:
    schema: website
    name: website
  object_relationships:
  - name: brand
    using:
      foreign_key_constraint_on: brandId
  array_relationships:
  - name: websitePages
    using:
      foreign_key_constraint_on:
        column: websiteId
        table:
          schema: website
          name: websitePage
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - brandId
      - faviconUrl
      - created_at
      - updated_at
      - published
      filter: {}
  - role: guest-consumer
    permission:
      columns:
      - published
      - brandId
      - id
      - faviconUrl
      - created_at
      - updated_at
      filter: {}
      allow_aggregations: true
- table:
    schema: website
    name: websitePage
  object_relationships:
  - name: website
    using:
      foreign_key_constraint_on: websiteId
  array_relationships:
  - name: websitePageModules
    using:
      foreign_key_constraint_on:
        column: websitePageId
        table:
          schema: website
          name: websitePageModule
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - websiteId
      - route
      - internalPageName
      - published
      - isArchived
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - isArchived
      - published
      - id
      - websiteId
      - internalPageName
      - route
      filter: {}
      allow_aggregations: true
- table:
    schema: website
    name: websitePageModule
  object_relationships:
  - name: file
    using:
      foreign_key_constraint_on: fileId
  - name: template
    using:
      foreign_key_constraint_on: templateId
  - name: websitePage
    using:
      foreign_key_constraint_on: websitePageId
  select_permissions:
  - role: consumer
    permission:
      columns:
      - id
      - websitePageId
      - moduleType
      - fileId
      - internalModuleIdentifier
      - templateId
      - position
      - visibilityConditionId
      - config
      - config2
      - config3
      - config4
      filter: {}
      allow_aggregations: true
  - role: guest-consumer
    permission:
      columns:
      - fileId
      - id
      - templateId
      - visibilityConditionId
      - websitePageId
      - config2
      - config
      - config3
      - position
      - config4
      - internalModuleIdentifier
      - moduleType
      filter: {}
      allow_aggregations: true
